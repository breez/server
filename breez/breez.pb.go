// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.8
// source: breez.proto

package breez

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetSwapPaymentReply_SwapError int32

const (
	GetSwapPaymentReply_NO_ERROR                GetSwapPaymentReply_SwapError = 0
	GetSwapPaymentReply_FUNDS_EXCEED_LIMIT      GetSwapPaymentReply_SwapError = 1
	GetSwapPaymentReply_TX_TOO_SMALL            GetSwapPaymentReply_SwapError = 2
	GetSwapPaymentReply_INVOICE_AMOUNT_MISMATCH GetSwapPaymentReply_SwapError = 3
	GetSwapPaymentReply_SWAP_EXPIRED            GetSwapPaymentReply_SwapError = 4
)

// Enum value maps for GetSwapPaymentReply_SwapError.
var (
	GetSwapPaymentReply_SwapError_name = map[int32]string{
		0: "NO_ERROR",
		1: "FUNDS_EXCEED_LIMIT",
		2: "TX_TOO_SMALL",
		3: "INVOICE_AMOUNT_MISMATCH",
		4: "SWAP_EXPIRED",
	}
	GetSwapPaymentReply_SwapError_value = map[string]int32{
		"NO_ERROR":                0,
		"FUNDS_EXCEED_LIMIT":      1,
		"TX_TOO_SMALL":            2,
		"INVOICE_AMOUNT_MISMATCH": 3,
		"SWAP_EXPIRED":            4,
	}
)

func (x GetSwapPaymentReply_SwapError) Enum() *GetSwapPaymentReply_SwapError {
	p := new(GetSwapPaymentReply_SwapError)
	*p = x
	return p
}

func (x GetSwapPaymentReply_SwapError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetSwapPaymentReply_SwapError) Descriptor() protoreflect.EnumDescriptor {
	return file_breez_proto_enumTypes[0].Descriptor()
}

func (GetSwapPaymentReply_SwapError) Type() protoreflect.EnumType {
	return &file_breez_proto_enumTypes[0]
}

func (x GetSwapPaymentReply_SwapError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetSwapPaymentReply_SwapError.Descriptor instead.
func (GetSwapPaymentReply_SwapError) EnumDescriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{32, 0}
}

type JoinCTPSessionRequest_PartyType int32

const (
	JoinCTPSessionRequest_PAYER JoinCTPSessionRequest_PartyType = 0
	JoinCTPSessionRequest_PAYEE JoinCTPSessionRequest_PartyType = 1
)

// Enum value maps for JoinCTPSessionRequest_PartyType.
var (
	JoinCTPSessionRequest_PartyType_name = map[int32]string{
		0: "PAYER",
		1: "PAYEE",
	}
	JoinCTPSessionRequest_PartyType_value = map[string]int32{
		"PAYER": 0,
		"PAYEE": 1,
	}
)

func (x JoinCTPSessionRequest_PartyType) Enum() *JoinCTPSessionRequest_PartyType {
	p := new(JoinCTPSessionRequest_PartyType)
	*p = x
	return p
}

func (x JoinCTPSessionRequest_PartyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinCTPSessionRequest_PartyType) Descriptor() protoreflect.EnumDescriptor {
	return file_breez_proto_enumTypes[1].Descriptor()
}

func (JoinCTPSessionRequest_PartyType) Type() protoreflect.EnumType {
	return &file_breez_proto_enumTypes[1]
}

func (x JoinCTPSessionRequest_PartyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinCTPSessionRequest_PartyType.Descriptor instead.
func (JoinCTPSessionRequest_PartyType) EnumDescriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{49, 0}
}

type RegisterTransactionConfirmationRequest_NotificationType int32

const (
	RegisterTransactionConfirmationRequest_READY_RECEIVE_PAYMENT RegisterTransactionConfirmationRequest_NotificationType = 0
	RegisterTransactionConfirmationRequest_CHANNEL_OPENED        RegisterTransactionConfirmationRequest_NotificationType = 1
)

// Enum value maps for RegisterTransactionConfirmationRequest_NotificationType.
var (
	RegisterTransactionConfirmationRequest_NotificationType_name = map[int32]string{
		0: "READY_RECEIVE_PAYMENT",
		1: "CHANNEL_OPENED",
	}
	RegisterTransactionConfirmationRequest_NotificationType_value = map[string]int32{
		"READY_RECEIVE_PAYMENT": 0,
		"CHANNEL_OPENED":        1,
	}
)

func (x RegisterTransactionConfirmationRequest_NotificationType) Enum() *RegisterTransactionConfirmationRequest_NotificationType {
	p := new(RegisterTransactionConfirmationRequest_NotificationType)
	*p = x
	return p
}

func (x RegisterTransactionConfirmationRequest_NotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterTransactionConfirmationRequest_NotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_breez_proto_enumTypes[2].Descriptor()
}

func (RegisterTransactionConfirmationRequest_NotificationType) Type() protoreflect.EnumType {
	return &file_breez_proto_enumTypes[2]
}

func (x RegisterTransactionConfirmationRequest_NotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterTransactionConfirmationRequest_NotificationType.Descriptor instead.
func (RegisterTransactionConfirmationRequest_NotificationType) EnumDescriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{53, 0}
}

type InactiveNotifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Days   int32  `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *InactiveNotifyRequest) Reset() {
	*x = InactiveNotifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InactiveNotifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InactiveNotifyRequest) ProtoMessage() {}

func (x *InactiveNotifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InactiveNotifyRequest.ProtoReflect.Descriptor instead.
func (*InactiveNotifyRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{0}
}

func (x *InactiveNotifyRequest) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *InactiveNotifyRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type InactiveNotifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InactiveNotifyResponse) Reset() {
	*x = InactiveNotifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InactiveNotifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InactiveNotifyResponse) ProtoMessage() {}

func (x *InactiveNotifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InactiveNotifyResponse.ProtoReflect.Descriptor instead.
func (*InactiveNotifyResponse) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{1}
}

type ReceiverInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReceiverInfoRequest) Reset() {
	*x = ReceiverInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiverInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiverInfoRequest) ProtoMessage() {}

func (x *ReceiverInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiverInfoRequest.ProtoReflect.Descriptor instead.
func (*ReceiverInfoRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{2}
}

type ReceiverInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *ReceiverInfoReply) Reset() {
	*x = ReceiverInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiverInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiverInfoReply) ProtoMessage() {}

func (x *ReceiverInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiverInfoReply.ProtoReflect.Descriptor instead.
func (*ReceiverInfoReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{3}
}

func (x *ReceiverInfoReply) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

type RatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RatesRequest) Reset() {
	*x = RatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatesRequest) ProtoMessage() {}

func (x *RatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatesRequest.ProtoReflect.Descriptor instead.
func (*RatesRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{4}
}

type Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin  string  `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Rate) Reset() {
	*x = Rate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rate) ProtoMessage() {}

func (x *Rate) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rate.ProtoReflect.Descriptor instead.
func (*Rate) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{5}
}

func (x *Rate) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

func (x *Rate) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type RatesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rates []*Rate `protobuf:"bytes,1,rep,name=rates,proto3" json:"rates,omitempty"`
}

func (x *RatesReply) Reset() {
	*x = RatesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatesReply) ProtoMessage() {}

func (x *RatesReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatesReply.ProtoReflect.Descriptor instead.
func (*RatesReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{6}
}

func (x *RatesReply) GetRates() []*Rate {
	if x != nil {
		return x.Rates
	}
	return nil
}

type LSPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The identity pubkey of the client
	Pubkey string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *LSPListRequest) Reset() {
	*x = LSPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSPListRequest) ProtoMessage() {}

func (x *LSPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSPListRequest.ProtoReflect.Descriptor instead.
func (*LSPListRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{7}
}

func (x *LSPListRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

type LSPInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The name of of lsp
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	/// The name of of lsp
	WidgetUrl string `protobuf:"bytes,2,opt,name=widget_url,proto3" json:"widget_url,omitempty"`
	/// The identity pubkey of the Lightning node
	Pubkey string `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	/// The network location of the lightning node, e.g. `12.34.56.78:9012` or `localhost:10011`
	Host string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	/// The channel capacity in satoshis
	ChannelCapacity int64 `protobuf:"varint,5,opt,name=channel_capacity,proto3" json:"channel_capacity,omitempty"`
	/// The target number of blocks that the funding transaction should be confirmed by.
	TargetConf int32 `protobuf:"varint,6,opt,name=target_conf,proto3" json:"target_conf,omitempty"`
	/// The base fee charged regardless of the number of milli-satoshis sent.
	BaseFeeMsat int64 `protobuf:"varint,7,opt,name=base_fee_msat,proto3" json:"base_fee_msat,omitempty"`
	/// The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
	FeeRate float64 `protobuf:"fixed64,8,opt,name=fee_rate,proto3" json:"fee_rate,omitempty"`
	/// The required timelock delta for HTLCs forwarded over the channel.
	TimeLockDelta uint32 `protobuf:"varint,9,opt,name=time_lock_delta,proto3" json:"time_lock_delta,omitempty"`
	/// The minimum value in millisatoshi we will require for incoming HTLCs on the channel.
	MinHtlcMsat         int64  `protobuf:"varint,10,opt,name=min_htlc_msat,proto3" json:"min_htlc_msat,omitempty"`
	ChannelFeePermyriad int64  `protobuf:"varint,11,opt,name=channel_fee_permyriad,json=channelFeePermyriad,proto3" json:"channel_fee_permyriad,omitempty"`
	LspPubkey           []byte `protobuf:"bytes,12,opt,name=lsp_pubkey,json=lspPubkey,proto3" json:"lsp_pubkey,omitempty"`
	// The channel can be closed if not used this duration in seconds.
	MaxInactiveDuration   int64 `protobuf:"varint,13,opt,name=max_inactive_duration,json=maxInactiveDuration,proto3" json:"max_inactive_duration,omitempty"`
	ChannelMinimumFeeMsat int64 `protobuf:"varint,14,opt,name=channel_minimum_fee_msat,json=channelMinimumFeeMsat,proto3" json:"channel_minimum_fee_msat,omitempty"`
}

func (x *LSPInformation) Reset() {
	*x = LSPInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSPInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSPInformation) ProtoMessage() {}

func (x *LSPInformation) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSPInformation.ProtoReflect.Descriptor instead.
func (*LSPInformation) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{8}
}

func (x *LSPInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LSPInformation) GetWidgetUrl() string {
	if x != nil {
		return x.WidgetUrl
	}
	return ""
}

func (x *LSPInformation) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *LSPInformation) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *LSPInformation) GetChannelCapacity() int64 {
	if x != nil {
		return x.ChannelCapacity
	}
	return 0
}

func (x *LSPInformation) GetTargetConf() int32 {
	if x != nil {
		return x.TargetConf
	}
	return 0
}

func (x *LSPInformation) GetBaseFeeMsat() int64 {
	if x != nil {
		return x.BaseFeeMsat
	}
	return 0
}

func (x *LSPInformation) GetFeeRate() float64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *LSPInformation) GetTimeLockDelta() uint32 {
	if x != nil {
		return x.TimeLockDelta
	}
	return 0
}

func (x *LSPInformation) GetMinHtlcMsat() int64 {
	if x != nil {
		return x.MinHtlcMsat
	}
	return 0
}

func (x *LSPInformation) GetChannelFeePermyriad() int64 {
	if x != nil {
		return x.ChannelFeePermyriad
	}
	return 0
}

func (x *LSPInformation) GetLspPubkey() []byte {
	if x != nil {
		return x.LspPubkey
	}
	return nil
}

func (x *LSPInformation) GetMaxInactiveDuration() int64 {
	if x != nil {
		return x.MaxInactiveDuration
	}
	return 0
}

func (x *LSPInformation) GetChannelMinimumFeeMsat() int64 {
	if x != nil {
		return x.ChannelMinimumFeeMsat
	}
	return 0
}

type LSPListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lsps map[string]*LSPInformation `protobuf:"bytes,1,rep,name=lsps,proto3" json:"lsps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // The key is the lsp id
}

func (x *LSPListReply) Reset() {
	*x = LSPListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSPListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSPListReply) ProtoMessage() {}

func (x *LSPListReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSPListReply.ProtoReflect.Descriptor instead.
func (*LSPListReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{9}
}

func (x *LSPListReply) GetLsps() map[string]*LSPInformation {
	if x != nil {
		return x.Lsps
	}
	return nil
}

type RegisterPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LspId string `protobuf:"bytes,1,opt,name=lsp_id,json=lspId,proto3" json:"lsp_id,omitempty"`
	Blob  []byte `protobuf:"bytes,3,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *RegisterPaymentRequest) Reset() {
	*x = RegisterPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPaymentRequest) ProtoMessage() {}

func (x *RegisterPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPaymentRequest.ProtoReflect.Descriptor instead.
func (*RegisterPaymentRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{10}
}

func (x *RegisterPaymentRequest) GetLspId() string {
	if x != nil {
		return x.LspId
	}
	return ""
}

func (x *RegisterPaymentRequest) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

type RegisterPaymentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterPaymentReply) Reset() {
	*x = RegisterPaymentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterPaymentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPaymentReply) ProtoMessage() {}

func (x *RegisterPaymentReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPaymentReply.ProtoReflect.Descriptor instead.
func (*RegisterPaymentReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{11}
}

type CheckChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LspId string `protobuf:"bytes,1,opt,name=lsp_id,json=lspId,proto3" json:"lsp_id,omitempty"`
	Blob  []byte `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *CheckChannelsRequest) Reset() {
	*x = CheckChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChannelsRequest) ProtoMessage() {}

func (x *CheckChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChannelsRequest.ProtoReflect.Descriptor instead.
func (*CheckChannelsRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{12}
}

func (x *CheckChannelsRequest) GetLspId() string {
	if x != nil {
		return x.LspId
	}
	return ""
}

func (x *CheckChannelsRequest) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

type CheckChannelsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blob []byte `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *CheckChannelsReply) Reset() {
	*x = CheckChannelsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChannelsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChannelsReply) ProtoMessage() {}

func (x *CheckChannelsReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChannelsReply.ProtoReflect.Descriptor instead.
func (*CheckChannelsReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{13}
}

func (x *CheckChannelsReply) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

type OpenLSPChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LspId  string `protobuf:"bytes,1,opt,name=lsp_id,json=lspId,proto3" json:"lsp_id,omitempty"`
	Pubkey string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *OpenLSPChannelRequest) Reset() {
	*x = OpenLSPChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenLSPChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenLSPChannelRequest) ProtoMessage() {}

func (x *OpenLSPChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenLSPChannelRequest.ProtoReflect.Descriptor instead.
func (*OpenLSPChannelRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{14}
}

func (x *OpenLSPChannelRequest) GetLspId() string {
	if x != nil {
		return x.LspId
	}
	return ""
}

func (x *OpenLSPChannelRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

type OpenLSPChannelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OpenLSPChannelReply) Reset() {
	*x = OpenLSPChannelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenLSPChannelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenLSPChannelReply) ProtoMessage() {}

func (x *OpenLSPChannelReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenLSPChannelReply.ProtoReflect.Descriptor instead.
func (*OpenLSPChannelReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{15}
}

type OpenChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey            string `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	NotificationToken string `protobuf:"bytes,2,opt,name=notificationToken,proto3" json:"notificationToken,omitempty"`
}

func (x *OpenChannelRequest) Reset() {
	*x = OpenChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenChannelRequest) ProtoMessage() {}

func (x *OpenChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenChannelRequest.ProtoReflect.Descriptor instead.
func (*OpenChannelRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{16}
}

func (x *OpenChannelRequest) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *OpenChannelRequest) GetNotificationToken() string {
	if x != nil {
		return x.NotificationToken
	}
	return ""
}

type OpenChannelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OpenChannelReply) Reset() {
	*x = OpenChannelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenChannelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenChannelReply) ProtoMessage() {}

func (x *OpenChannelReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenChannelReply.ProtoReflect.Descriptor instead.
func (*OpenChannelReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{17}
}

type OpenPublicChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *OpenPublicChannelRequest) Reset() {
	*x = OpenPublicChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenPublicChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenPublicChannelRequest) ProtoMessage() {}

func (x *OpenPublicChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenPublicChannelRequest.ProtoReflect.Descriptor instead.
func (*OpenPublicChannelRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{18}
}

func (x *OpenPublicChannelRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

type OpenPublicChannelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OpenPublicChannelReply) Reset() {
	*x = OpenPublicChannelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenPublicChannelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenPublicChannelReply) ProtoMessage() {}

func (x *OpenPublicChannelReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenPublicChannelReply.ProtoReflect.Descriptor instead.
func (*OpenPublicChannelReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{19}
}

type Captcha struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Image []byte `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *Captcha) Reset() {
	*x = Captcha{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Captcha) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Captcha) ProtoMessage() {}

func (x *Captcha) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Captcha.ProtoReflect.Descriptor instead.
func (*Captcha) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{20}
}

func (x *Captcha) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Captcha) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type UpdateChannelPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey string `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
}

func (x *UpdateChannelPolicyRequest) Reset() {
	*x = UpdateChannelPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelPolicyRequest) ProtoMessage() {}

func (x *UpdateChannelPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateChannelPolicyRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateChannelPolicyRequest) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

type UpdateChannelPolicyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateChannelPolicyReply) Reset() {
	*x = UpdateChannelPolicyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelPolicyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelPolicyReply) ProtoMessage() {}

func (x *UpdateChannelPolicyReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelPolicyReply.ProtoReflect.Descriptor instead.
func (*UpdateChannelPolicyReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{22}
}

type AddFundInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID            string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	NotificationToken string `protobuf:"bytes,2,opt,name=notificationToken,proto3" json:"notificationToken,omitempty"`
	Pubkey            []byte `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Hash              []byte `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *AddFundInitRequest) Reset() {
	*x = AddFundInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFundInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFundInitRequest) ProtoMessage() {}

func (x *AddFundInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFundInitRequest.ProtoReflect.Descriptor instead.
func (*AddFundInitRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{23}
}

func (x *AddFundInitRequest) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *AddFundInitRequest) GetNotificationToken() string {
	if x != nil {
		return x.NotificationToken
	}
	return ""
}

func (x *AddFundInitRequest) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *AddFundInitRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type AddFundInitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address           string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pubkey            []byte `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	LockHeight        int64  `protobuf:"varint,3,opt,name=lockHeight,proto3" json:"lockHeight,omitempty"`
	MaxAllowedDeposit int64  `protobuf:"varint,4,opt,name=maxAllowedDeposit,proto3" json:"maxAllowedDeposit,omitempty"`
	ErrorMessage      string `protobuf:"bytes,5,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	RequiredReserve   int64  `protobuf:"varint,6,opt,name=requiredReserve,proto3" json:"requiredReserve,omitempty"`
	MinAllowedDeposit int64  `protobuf:"varint,7,opt,name=minAllowedDeposit,proto3" json:"minAllowedDeposit,omitempty"`
}

func (x *AddFundInitReply) Reset() {
	*x = AddFundInitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFundInitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFundInitReply) ProtoMessage() {}

func (x *AddFundInitReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFundInitReply.ProtoReflect.Descriptor instead.
func (*AddFundInitReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{24}
}

func (x *AddFundInitReply) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddFundInitReply) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *AddFundInitReply) GetLockHeight() int64 {
	if x != nil {
		return x.LockHeight
	}
	return 0
}

func (x *AddFundInitReply) GetMaxAllowedDeposit() int64 {
	if x != nil {
		return x.MaxAllowedDeposit
	}
	return 0
}

func (x *AddFundInitReply) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *AddFundInitReply) GetRequiredReserve() int64 {
	if x != nil {
		return x.RequiredReserve
	}
	return 0
}

func (x *AddFundInitReply) GetMinAllowedDeposit() int64 {
	if x != nil {
		return x.MinAllowedDeposit
	}
	return 0
}

type AddFundStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses         []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	NotificationToken string   `protobuf:"bytes,2,opt,name=notificationToken,proto3" json:"notificationToken,omitempty"`
}

func (x *AddFundStatusRequest) Reset() {
	*x = AddFundStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFundStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFundStatusRequest) ProtoMessage() {}

func (x *AddFundStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFundStatusRequest.ProtoReflect.Descriptor instead.
func (*AddFundStatusRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{25}
}

func (x *AddFundStatusRequest) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *AddFundStatusRequest) GetNotificationToken() string {
	if x != nil {
		return x.NotificationToken
	}
	return ""
}

type AddFundStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statuses map[string]*AddFundStatusReply_AddressStatus `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddFundStatusReply) Reset() {
	*x = AddFundStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFundStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFundStatusReply) ProtoMessage() {}

func (x *AddFundStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFundStatusReply.ProtoReflect.Descriptor instead.
func (*AddFundStatusReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{26}
}

func (x *AddFundStatusReply) GetStatuses() map[string]*AddFundStatusReply_AddressStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type RemoveFundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount  int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *RemoveFundRequest) Reset() {
	*x = RemoveFundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFundRequest) ProtoMessage() {}

func (x *RemoveFundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFundRequest.ProtoReflect.Descriptor instead.
func (*RemoveFundRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{27}
}

func (x *RemoveFundRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RemoveFundRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type RemoveFundReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentRequest string `protobuf:"bytes,1,opt,name=paymentRequest,proto3" json:"paymentRequest,omitempty"`
	ErrorMessage   string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *RemoveFundReply) Reset() {
	*x = RemoveFundReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFundReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFundReply) ProtoMessage() {}

func (x *RemoveFundReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFundReply.ProtoReflect.Descriptor instead.
func (*RemoveFundReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{28}
}

func (x *RemoveFundReply) GetPaymentRequest() string {
	if x != nil {
		return x.PaymentRequest
	}
	return ""
}

func (x *RemoveFundReply) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type RedeemRemovedFundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paymenthash string `protobuf:"bytes,1,opt,name=paymenthash,proto3" json:"paymenthash,omitempty"`
}

func (x *RedeemRemovedFundsRequest) Reset() {
	*x = RedeemRemovedFundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedeemRemovedFundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemRemovedFundsRequest) ProtoMessage() {}

func (x *RedeemRemovedFundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemRemovedFundsRequest.ProtoReflect.Descriptor instead.
func (*RedeemRemovedFundsRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{29}
}

func (x *RedeemRemovedFundsRequest) GetPaymenthash() string {
	if x != nil {
		return x.Paymenthash
	}
	return ""
}

type RedeemRemovedFundsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *RedeemRemovedFundsReply) Reset() {
	*x = RedeemRemovedFundsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedeemRemovedFundsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemRemovedFundsReply) ProtoMessage() {}

func (x *RedeemRemovedFundsReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemRemovedFundsReply.ProtoReflect.Descriptor instead.
func (*RedeemRemovedFundsReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{30}
}

func (x *RedeemRemovedFundsReply) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type GetSwapPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentRequest string `protobuf:"bytes,1,opt,name=paymentRequest,proto3" json:"paymentRequest,omitempty"`
}

func (x *GetSwapPaymentRequest) Reset() {
	*x = GetSwapPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwapPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwapPaymentRequest) ProtoMessage() {}

func (x *GetSwapPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwapPaymentRequest.ProtoReflect.Descriptor instead.
func (*GetSwapPaymentRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{31}
}

func (x *GetSwapPaymentRequest) GetPaymentRequest() string {
	if x != nil {
		return x.PaymentRequest
	}
	return ""
}

type GetSwapPaymentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentError string `protobuf:"bytes,1,opt,name=paymentError,proto3" json:"paymentError,omitempty"`
	// deprecated
	FundsExceededLimit bool                          `protobuf:"varint,2,opt,name=funds_exceeded_limit,json=fundsExceededLimit,proto3" json:"funds_exceeded_limit,omitempty"`
	SwapError          GetSwapPaymentReply_SwapError `protobuf:"varint,3,opt,name=swap_error,json=swapError,proto3,enum=breez.GetSwapPaymentReply_SwapError" json:"swap_error,omitempty"`
}

func (x *GetSwapPaymentReply) Reset() {
	*x = GetSwapPaymentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwapPaymentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwapPaymentReply) ProtoMessage() {}

func (x *GetSwapPaymentReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwapPaymentReply.ProtoReflect.Descriptor instead.
func (*GetSwapPaymentReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{32}
}

func (x *GetSwapPaymentReply) GetPaymentError() string {
	if x != nil {
		return x.PaymentError
	}
	return ""
}

func (x *GetSwapPaymentReply) GetFundsExceededLimit() bool {
	if x != nil {
		return x.FundsExceededLimit
	}
	return false
}

func (x *GetSwapPaymentReply) GetSwapError() GetSwapPaymentReply_SwapError {
	if x != nil {
		return x.SwapError
	}
	return GetSwapPaymentReply_NO_ERROR
}

type RedeemSwapPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preimage []byte `protobuf:"bytes,1,opt,name=preimage,proto3" json:"preimage,omitempty"`
	/// The target number of blocks that the funding transaction should be confirmed by.
	TargetConf int32 `protobuf:"varint,2,opt,name=target_conf,json=targetConf,proto3" json:"target_conf,omitempty"`
	/// A manual fee rate set in sat/byte that should be used when crafting the funding transaction.
	SatPerByte int64 `protobuf:"varint,3,opt,name=sat_per_byte,json=satPerByte,proto3" json:"sat_per_byte,omitempty"`
}

func (x *RedeemSwapPaymentRequest) Reset() {
	*x = RedeemSwapPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedeemSwapPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemSwapPaymentRequest) ProtoMessage() {}

func (x *RedeemSwapPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemSwapPaymentRequest.ProtoReflect.Descriptor instead.
func (*RedeemSwapPaymentRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{33}
}

func (x *RedeemSwapPaymentRequest) GetPreimage() []byte {
	if x != nil {
		return x.Preimage
	}
	return nil
}

func (x *RedeemSwapPaymentRequest) GetTargetConf() int32 {
	if x != nil {
		return x.TargetConf
	}
	return 0
}

func (x *RedeemSwapPaymentRequest) GetSatPerByte() int64 {
	if x != nil {
		return x.SatPerByte
	}
	return 0
}

type RedeemSwapPaymentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *RedeemSwapPaymentReply) Reset() {
	*x = RedeemSwapPaymentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedeemSwapPaymentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemSwapPaymentReply) ProtoMessage() {}

func (x *RedeemSwapPaymentReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemSwapPaymentReply.ProtoReflect.Descriptor instead.
func (*RedeemSwapPaymentReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{34}
}

func (x *RedeemSwapPaymentReply) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

// The request message containing the device id and lightning id
type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceID    string `protobuf:"bytes,1,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	LightningID string `protobuf:"bytes,2,opt,name=lightningID,proto3" json:"lightningID,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{35}
}

func (x *RegisterRequest) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *RegisterRequest) GetLightningID() string {
	if x != nil {
		return x.LightningID
	}
	return ""
}

// The response message containing the breez id
type RegisterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BreezID string `protobuf:"bytes,1,opt,name=breezID,proto3" json:"breezID,omitempty"`
}

func (x *RegisterReply) Reset() {
	*x = RegisterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReply) ProtoMessage() {}

func (x *RegisterReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReply.ProtoReflect.Descriptor instead.
func (*RegisterReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{36}
}

func (x *RegisterReply) GetBreezID() string {
	if x != nil {
		return x.BreezID
	}
	return ""
}

type PaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BreezID string `protobuf:"bytes,1,opt,name=breezID,proto3" json:"breezID,omitempty"`
	Invoice string `protobuf:"bytes,2,opt,name=invoice,proto3" json:"invoice,omitempty"`
	Payee   string `protobuf:"bytes,3,opt,name=payee,proto3" json:"payee,omitempty"`
	Amount  int64  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PaymentRequest) Reset() {
	*x = PaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentRequest) ProtoMessage() {}

func (x *PaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentRequest.ProtoReflect.Descriptor instead.
func (*PaymentRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{37}
}

func (x *PaymentRequest) GetBreezID() string {
	if x != nil {
		return x.BreezID
	}
	return ""
}

func (x *PaymentRequest) GetInvoice() string {
	if x != nil {
		return x.Invoice
	}
	return ""
}

func (x *PaymentRequest) GetPayee() string {
	if x != nil {
		return x.Payee
	}
	return ""
}

func (x *PaymentRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type InvoiceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *InvoiceReply) Reset() {
	*x = InvoiceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceReply) ProtoMessage() {}

func (x *InvoiceReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceReply.ProtoReflect.Descriptor instead.
func (*InvoiceReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{38}
}

func (x *InvoiceReply) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type UploadFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *UploadFileRequest) Reset() {
	*x = UploadFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileRequest) ProtoMessage() {}

func (x *UploadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileRequest.ProtoReflect.Descriptor instead.
func (*UploadFileRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{39}
}

func (x *UploadFileRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type UploadFileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *UploadFileReply) Reset() {
	*x = UploadFileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileReply) ProtoMessage() {}

func (x *UploadFileReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileReply.ProtoReflect.Descriptor instead.
func (*UploadFileReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{40}
}

func (x *UploadFileReply) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{41}
}

type PingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *PingReply) Reset() {
	*x = PingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingReply) ProtoMessage() {}

func (x *PingReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingReply.ProtoReflect.Descriptor instead.
func (*PingReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{42}
}

func (x *PingReply) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type OrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullName string `protobuf:"bytes,1,opt,name=FullName,proto3" json:"FullName,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	City     string `protobuf:"bytes,3,opt,name=City,proto3" json:"City,omitempty"`
	State    string `protobuf:"bytes,4,opt,name=State,proto3" json:"State,omitempty"`
	Zip      string `protobuf:"bytes,5,opt,name=Zip,proto3" json:"Zip,omitempty"`
	Country  string `protobuf:"bytes,6,opt,name=Country,proto3" json:"Country,omitempty"`
	Email    string `protobuf:"bytes,7,opt,name=Email,proto3" json:"Email,omitempty"`
}

func (x *OrderRequest) Reset() {
	*x = OrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderRequest) ProtoMessage() {}

func (x *OrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderRequest.ProtoReflect.Descriptor instead.
func (*OrderRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{43}
}

func (x *OrderRequest) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *OrderRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *OrderRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *OrderRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *OrderRequest) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *OrderRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *OrderRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type OrderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrderReply) Reset() {
	*x = OrderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderReply) ProtoMessage() {}

func (x *OrderReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderReply.ProtoReflect.Descriptor instead.
func (*OrderReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{44}
}

type SetMeetingInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Signature string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SetMeetingInfoRequest) Reset() {
	*x = SetMeetingInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMeetingInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMeetingInfoRequest) ProtoMessage() {}

func (x *SetMeetingInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMeetingInfoRequest.ProtoReflect.Descriptor instead.
func (*SetMeetingInfoRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{45}
}

func (x *SetMeetingInfoRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetMeetingInfoRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SetMeetingInfoRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type SetMeetingInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetMeetingInfoResponse) Reset() {
	*x = SetMeetingInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMeetingInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMeetingInfoResponse) ProtoMessage() {}

func (x *SetMeetingInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMeetingInfoResponse.ProtoReflect.Descriptor instead.
func (*SetMeetingInfoResponse) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{46}
}

type GetMeetingInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetMeetingInfoRequest) Reset() {
	*x = GetMeetingInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeetingInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingInfoRequest) ProtoMessage() {}

func (x *GetMeetingInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingInfoRequest.ProtoReflect.Descriptor instead.
func (*GetMeetingInfoRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{47}
}

func (x *GetMeetingInfoRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GetMeetingInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *GetMeetingInfoResponse) Reset() {
	*x = GetMeetingInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeetingInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingInfoResponse) ProtoMessage() {}

func (x *GetMeetingInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingInfoResponse.ProtoReflect.Descriptor instead.
func (*GetMeetingInfoResponse) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{48}
}

func (x *GetMeetingInfoResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GetMeetingInfoResponse) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type JoinCTPSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyType         JoinCTPSessionRequest_PartyType `protobuf:"varint,1,opt,name=partyType,proto3,enum=breez.JoinCTPSessionRequest_PartyType" json:"partyType,omitempty"`
	PartyName         string                          `protobuf:"bytes,2,opt,name=partyName,proto3" json:"partyName,omitempty"`
	NotificationToken string                          `protobuf:"bytes,3,opt,name=notificationToken,proto3" json:"notificationToken,omitempty"`
	SessionID         string                          `protobuf:"bytes,4,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (x *JoinCTPSessionRequest) Reset() {
	*x = JoinCTPSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinCTPSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinCTPSessionRequest) ProtoMessage() {}

func (x *JoinCTPSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinCTPSessionRequest.ProtoReflect.Descriptor instead.
func (*JoinCTPSessionRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{49}
}

func (x *JoinCTPSessionRequest) GetPartyType() JoinCTPSessionRequest_PartyType {
	if x != nil {
		return x.PartyType
	}
	return JoinCTPSessionRequest_PAYER
}

func (x *JoinCTPSessionRequest) GetPartyName() string {
	if x != nil {
		return x.PartyName
	}
	return ""
}

func (x *JoinCTPSessionRequest) GetNotificationToken() string {
	if x != nil {
		return x.NotificationToken
	}
	return ""
}

func (x *JoinCTPSessionRequest) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

type JoinCTPSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Expiry    int64  `protobuf:"varint,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *JoinCTPSessionResponse) Reset() {
	*x = JoinCTPSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinCTPSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinCTPSessionResponse) ProtoMessage() {}

func (x *JoinCTPSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinCTPSessionResponse.ProtoReflect.Descriptor instead.
func (*JoinCTPSessionResponse) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{50}
}

func (x *JoinCTPSessionResponse) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *JoinCTPSessionResponse) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

type TerminateCTPSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (x *TerminateCTPSessionRequest) Reset() {
	*x = TerminateCTPSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateCTPSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateCTPSessionRequest) ProtoMessage() {}

func (x *TerminateCTPSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateCTPSessionRequest.ProtoReflect.Descriptor instead.
func (*TerminateCTPSessionRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{51}
}

func (x *TerminateCTPSessionRequest) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

type TerminateCTPSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TerminateCTPSessionResponse) Reset() {
	*x = TerminateCTPSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateCTPSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateCTPSessionResponse) ProtoMessage() {}

func (x *TerminateCTPSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateCTPSessionResponse.ProtoReflect.Descriptor instead.
func (*TerminateCTPSessionResponse) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{52}
}

type RegisterTransactionConfirmationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxID              string                                                  `protobuf:"bytes,1,opt,name=txID,proto3" json:"txID,omitempty"`
	NotificationToken string                                                  `protobuf:"bytes,2,opt,name=notificationToken,proto3" json:"notificationToken,omitempty"`
	NotificationType  RegisterTransactionConfirmationRequest_NotificationType `protobuf:"varint,3,opt,name=notificationType,proto3,enum=breez.RegisterTransactionConfirmationRequest_NotificationType" json:"notificationType,omitempty"`
}

func (x *RegisterTransactionConfirmationRequest) Reset() {
	*x = RegisterTransactionConfirmationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTransactionConfirmationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTransactionConfirmationRequest) ProtoMessage() {}

func (x *RegisterTransactionConfirmationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTransactionConfirmationRequest.ProtoReflect.Descriptor instead.
func (*RegisterTransactionConfirmationRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{53}
}

func (x *RegisterTransactionConfirmationRequest) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *RegisterTransactionConfirmationRequest) GetNotificationToken() string {
	if x != nil {
		return x.NotificationToken
	}
	return ""
}

func (x *RegisterTransactionConfirmationRequest) GetNotificationType() RegisterTransactionConfirmationRequest_NotificationType {
	if x != nil {
		return x.NotificationType
	}
	return RegisterTransactionConfirmationRequest_READY_RECEIVE_PAYMENT
}

type RegisterTransactionConfirmationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterTransactionConfirmationResponse) Reset() {
	*x = RegisterTransactionConfirmationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTransactionConfirmationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTransactionConfirmationResponse) ProtoMessage() {}

func (x *RegisterTransactionConfirmationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTransactionConfirmationResponse.ProtoReflect.Descriptor instead.
func (*RegisterTransactionConfirmationResponse) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{54}
}

type RegisterPeriodicSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationToken string `protobuf:"bytes,1,opt,name=notificationToken,proto3" json:"notificationToken,omitempty"`
}

func (x *RegisterPeriodicSyncRequest) Reset() {
	*x = RegisterPeriodicSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterPeriodicSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPeriodicSyncRequest) ProtoMessage() {}

func (x *RegisterPeriodicSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPeriodicSyncRequest.ProtoReflect.Descriptor instead.
func (*RegisterPeriodicSyncRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{55}
}

func (x *RegisterPeriodicSyncRequest) GetNotificationToken() string {
	if x != nil {
		return x.NotificationToken
	}
	return ""
}

type RegisterPeriodicSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterPeriodicSyncResponse) Reset() {
	*x = RegisterPeriodicSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterPeriodicSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPeriodicSyncResponse) ProtoMessage() {}

func (x *RegisterPeriodicSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPeriodicSyncResponse.ProtoReflect.Descriptor instead.
func (*RegisterPeriodicSyncResponse) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{56}
}

type BoltzReverseSwapLockupTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoltzId            string `protobuf:"bytes,1,opt,name=boltz_id,json=boltzId,proto3" json:"boltz_id,omitempty"`
	TimeoutBlockHeight uint32 `protobuf:"varint,2,opt,name=timeout_block_height,json=timeoutBlockHeight,proto3" json:"timeout_block_height,omitempty"`
}

func (x *BoltzReverseSwapLockupTx) Reset() {
	*x = BoltzReverseSwapLockupTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoltzReverseSwapLockupTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoltzReverseSwapLockupTx) ProtoMessage() {}

func (x *BoltzReverseSwapLockupTx) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoltzReverseSwapLockupTx.ProtoReflect.Descriptor instead.
func (*BoltzReverseSwapLockupTx) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{57}
}

func (x *BoltzReverseSwapLockupTx) GetBoltzId() string {
	if x != nil {
		return x.BoltzId
	}
	return ""
}

func (x *BoltzReverseSwapLockupTx) GetTimeoutBlockHeight() uint32 {
	if x != nil {
		return x.TimeoutBlockHeight
	}
	return 0
}

type PushTxNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId        string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Title           string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Body            string `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	TxHash          []byte `protobuf:"bytes,4,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Script          []byte `protobuf:"bytes,5,opt,name=script,proto3" json:"script,omitempty"`
	BlockHeightHint uint32 `protobuf:"varint,6,opt,name=block_height_hint,json=blockHeightHint,proto3" json:"block_height_hint,omitempty"`
	// Types that are assignable to Info:
	//	*PushTxNotificationRequest_BoltzReverseSwapLockupTxInfo
	Info isPushTxNotificationRequest_Info `protobuf_oneof:"info"`
}

func (x *PushTxNotificationRequest) Reset() {
	*x = PushTxNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushTxNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushTxNotificationRequest) ProtoMessage() {}

func (x *PushTxNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushTxNotificationRequest.ProtoReflect.Descriptor instead.
func (*PushTxNotificationRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{58}
}

func (x *PushTxNotificationRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *PushTxNotificationRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PushTxNotificationRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *PushTxNotificationRequest) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *PushTxNotificationRequest) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *PushTxNotificationRequest) GetBlockHeightHint() uint32 {
	if x != nil {
		return x.BlockHeightHint
	}
	return 0
}

func (m *PushTxNotificationRequest) GetInfo() isPushTxNotificationRequest_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (x *PushTxNotificationRequest) GetBoltzReverseSwapLockupTxInfo() *BoltzReverseSwapLockupTx {
	if x, ok := x.GetInfo().(*PushTxNotificationRequest_BoltzReverseSwapLockupTxInfo); ok {
		return x.BoltzReverseSwapLockupTxInfo
	}
	return nil
}

type isPushTxNotificationRequest_Info interface {
	isPushTxNotificationRequest_Info()
}

type PushTxNotificationRequest_BoltzReverseSwapLockupTxInfo struct {
	BoltzReverseSwapLockupTxInfo *BoltzReverseSwapLockupTx `protobuf:"bytes,7,opt,name=boltz_reverse_swap_lockup_tx_info,json=boltzReverseSwapLockupTxInfo,proto3,oneof"`
}

func (*PushTxNotificationRequest_BoltzReverseSwapLockupTxInfo) isPushTxNotificationRequest_Info() {}

type PushTxNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushTxNotificationResponse) Reset() {
	*x = PushTxNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushTxNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushTxNotificationResponse) ProtoMessage() {}

func (x *PushTxNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushTxNotificationResponse.ProtoReflect.Descriptor instead.
func (*PushTxNotificationResponse) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{59}
}

type BreezAppVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BreezAppVersionsRequest) Reset() {
	*x = BreezAppVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreezAppVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreezAppVersionsRequest) ProtoMessage() {}

func (x *BreezAppVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreezAppVersionsRequest.ProtoReflect.Descriptor instead.
func (*BreezAppVersionsRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{60}
}

type BreezAppVersionsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version []string `protobuf:"bytes,1,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *BreezAppVersionsReply) Reset() {
	*x = BreezAppVersionsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreezAppVersionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreezAppVersionsReply) ProtoMessage() {}

func (x *BreezAppVersionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreezAppVersionsReply.ProtoReflect.Descriptor instead.
func (*BreezAppVersionsReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{61}
}

func (x *BreezAppVersionsReply) GetVersion() []string {
	if x != nil {
		return x.Version
	}
	return nil
}

type GetReverseRoutingNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetReverseRoutingNodeRequest) Reset() {
	*x = GetReverseRoutingNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReverseRoutingNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReverseRoutingNodeRequest) ProtoMessage() {}

func (x *GetReverseRoutingNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReverseRoutingNodeRequest.ProtoReflect.Descriptor instead.
func (*GetReverseRoutingNodeRequest) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{62}
}

type GetReverseRoutingNodeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId []byte `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *GetReverseRoutingNodeReply) Reset() {
	*x = GetReverseRoutingNodeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReverseRoutingNodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReverseRoutingNodeReply) ProtoMessage() {}

func (x *GetReverseRoutingNodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReverseRoutingNodeReply.ProtoReflect.Descriptor instead.
func (*GetReverseRoutingNodeReply) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{63}
}

func (x *GetReverseRoutingNodeReply) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

type AddFundStatusReply_AddressStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx        string `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Amount    int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Confirmed bool   `protobuf:"varint,3,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	BlockHash string `protobuf:"bytes,4,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
}

func (x *AddFundStatusReply_AddressStatus) Reset() {
	*x = AddFundStatusReply_AddressStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breez_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFundStatusReply_AddressStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFundStatusReply_AddressStatus) ProtoMessage() {}

func (x *AddFundStatusReply_AddressStatus) ProtoReflect() protoreflect.Message {
	mi := &file_breez_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFundStatusReply_AddressStatus.ProtoReflect.Descriptor instead.
func (*AddFundStatusReply_AddressStatus) Descriptor() ([]byte, []int) {
	return file_breez_proto_rawDescGZIP(), []int{26, 0}
}

func (x *AddFundStatusReply_AddressStatus) GetTx() string {
	if x != nil {
		return x.Tx
	}
	return ""
}

func (x *AddFundStatusReply_AddressStatus) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AddFundStatusReply_AddressStatus) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

func (x *AddFundStatusReply_AddressStatus) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

var File_breez_proto protoreflect.FileDescriptor

var file_breez_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x62,
	0x72, 0x65, 0x65, 0x7a, 0x22, 0x43, 0x0a, 0x15, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x11, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x0e, 0x0a, 0x0c, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x30, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f, 0x0a, 0x0a, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x22, 0x28, 0x0a, 0x0e, 0x4c, 0x53,
	0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x22, 0x90, 0x04, 0x0a, 0x0e, 0x4c, 0x53, 0x50, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x66,
	0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x6d, 0x73,
	0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x74,
	0x6c, 0x63, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x79, 0x72, 0x69, 0x61, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46,
	0x65, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x79, 0x72, 0x69, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x73, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x6c, 0x73, 0x70, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61,
	0x78, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x49, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37,
	0x0a, 0x18, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x46, 0x65, 0x65, 0x4d, 0x73, 0x61, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x0c, 0x4c, 0x53, 0x50, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x73, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x4c,
	0x53, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x73, 0x70, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x73, 0x70, 0x73, 0x1a, 0x4e, 0x0a, 0x09, 0x4c,
	0x73, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x65, 0x65,
	0x7a, 0x2e, 0x4c, 0x53, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x16, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x73, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x6c, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62,
	0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x41, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x73, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x22, 0x28, 0x0a, 0x12, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x62, 0x6c, 0x6f, 0x62, 0x22, 0x46, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x6e, 0x4c, 0x53, 0x50,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x73, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x15, 0x0a,
	0x13, 0x4f, 0x70, 0x65, 0x6e, 0x4c, 0x53, 0x50, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x5a, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x12, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x32, 0x0a, 0x18, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x18, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x6e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x2f, 0x0a, 0x07, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x22, 0x34, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x46, 0x75, 0x6e,
	0x64, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x8e,
	0x02, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x69,
	0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x22,
	0x62, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xb4, 0x02, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62,
	0x72, 0x65, 0x65, 0x7a, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x1a,
	0x73, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x1a, 0x64, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x41,
	0x64, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x45, 0x0a, 0x11, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x5d, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x3d, 0x0a, 0x19, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x68, 0x61, 0x73, 0x68, 0x22,
	0x2d, 0x0a, 0x17, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x3f,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xa4, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x64, 0x73,
	0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x43, 0x0a,
	0x0a, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61,
	0x70, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x77,
	0x61, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x09, 0x73, 0x77, 0x61, 0x70, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x72, 0x0a, 0x09, 0x53, 0x77, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x58, 0x5f, 0x54, 0x4f, 0x4f, 0x5f,
	0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x4f, 0x49,
	0x43, 0x45, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x22, 0x79, 0x0a, 0x18, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x20, 0x0a, 0x0c, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x61, 0x74, 0x50, 0x65, 0x72, 0x42, 0x79, 0x74,
	0x65, 0x22, 0x2c, 0x0a, 0x16, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x77, 0x61, 0x70, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22,
	0x4f, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x44,
	0x22, 0x29, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x49, 0x44, 0x22, 0x72, 0x0a, 0x0e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x72, 0x65, 0x65, 0x7a, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x24, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2d, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x23, 0x0a, 0x0f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xb0, 0x01, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x5a, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x5a,
	0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x22, 0x0c, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x5d, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x18, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x4c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x15, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x54, 0x50, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x54, 0x50, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x21, 0x0a, 0x09,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x59,
	0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x59, 0x45, 0x45, 0x10, 0x01, 0x22,
	0x4e, 0x0a, 0x16, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x54, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22,
	0x3a, 0x0a, 0x1a, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x54, 0x50, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x1d, 0x0a, 0x1b, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x54, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x26, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x6a, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3e, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x41, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x22, 0x29, 0x0a, 0x27, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4b, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x1e,
	0x0a, 0x1c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67,
	0x0a, 0x18, 0x42, 0x6f, 0x6c, 0x74, 0x7a, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x77,
	0x61, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f,
	0x6c, 0x74, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f,
	0x6c, 0x74, 0x7a, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xb3, 0x02, 0x0a, 0x19, 0x50, 0x75, 0x73, 0x68,
	0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x69,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x21, 0x62, 0x6f, 0x6c,
	0x74, 0x7a, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x42, 0x6f, 0x6c,
	0x74, 0x7a, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x77, 0x61, 0x70, 0x4c, 0x6f, 0x63,
	0x6b, 0x75, 0x70, 0x54, 0x78, 0x48, 0x00, 0x52, 0x1c, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x77, 0x61, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x54,
	0x78, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x1c, 0x0a,
	0x1a, 0x50, 0x75, 0x73, 0x68, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x42,
	0x72, 0x65, 0x65, 0x7a, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x31, 0x0a, 0x15, 0x42, 0x72, 0x65, 0x65, 0x7a, 0x41,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x32, 0x89, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x72, 0x12, 0x40, 0x0a,
	0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x16, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x3b, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x15,
	0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x40, 0x0a, 0x0b,
	0x43, 0x61, 0x72, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x05, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x62, 0x72, 0x65, 0x65,
	0x7a, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x89,
	0x01, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x18, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x8c, 0x02, 0x0a, 0x0b, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x50, 0x69,
	0x6e, 0x67, 0x12, 0x12, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x05, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x13, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x10, 0x42, 0x72, 0x65, 0x65, 0x7a, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1e, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x42, 0x72, 0x65, 0x65, 0x7a, 0x41,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x42, 0x72, 0x65, 0x65, 0x7a, 0x41,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x46, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0xb2, 0x02, 0x0a, 0x0d, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x4c,
	0x53, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x4c,
	0x53, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x4c, 0x53, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x4c, 0x53, 0x50, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x4c, 0x53, 0x50, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x4c, 0x53, 0x50, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x6c,
	0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f,
	0x70, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x2e, 0x62, 0x72, 0x65,
	0x65, 0x7a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x72,
	0x65, 0x65, 0x7a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0xae, 0x05, 0x0a,
	0x0b, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0b,
	0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x19, 0x2e, 0x62, 0x72,
	0x65, 0x65, 0x7a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x72,
	0x65, 0x65, 0x7a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x0b, 0x41, 0x64, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x2e,
	0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a,
	0x2e, 0x41, 0x64, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x41, 0x64, 0x64,
	0x46, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40,
	0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x18, 0x2e, 0x62,
	0x72, 0x65, 0x65, 0x7a, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x52,
	0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a,
	0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x46, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x62,
	0x72, 0x65, 0x65, 0x7a, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x72, 0x65,
	0x65, 0x7a, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x62,
	0x72, 0x65, 0x65, 0x7a, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x72,
	0x65, 0x65, 0x7a, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xa1, 0x03,
	0x0a, 0x07, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0b, 0x41, 0x64, 0x64,
	0x46, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a,
	0x2e, 0x41, 0x64, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x41, 0x64, 0x64, 0x46,
	0x75, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x0d, 0x41, 0x64, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62,
	0x72, 0x65, 0x65, 0x7a, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x62, 0x72,
	0x65, 0x65, 0x7a, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x72, 0x65, 0x65,
	0x7a, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x52, 0x65, 0x64, 0x65, 0x65,
	0x6d, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x62,
	0x72, 0x65, 0x65, 0x7a, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x77, 0x61, 0x70, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x77, 0x61, 0x70,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62,
	0x72, 0x65, 0x65, 0x7a, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x32, 0xb6, 0x01, 0x0a, 0x03, 0x43, 0x54, 0x50, 0x12, 0x4f, 0x0a, 0x0e, 0x4a, 0x6f, 0x69,
	0x6e, 0x43, 0x54, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x62, 0x72,
	0x65, 0x65, 0x7a, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x54, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x72, 0x65, 0x65,
	0x7a, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x54, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x54, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x43, 0x54, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x54, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xa9, 0x01, 0x0a, 0x05, 0x4a,
	0x69, 0x74, 0x73, 0x69, 0x12, 0x4f, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x53,
	0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x53, 0x65, 0x74,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x71, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x22,
	0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x71, 0x0a, 0x0e, 0x50, 0x75, 0x73,
	0x68, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x16, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x50, 0x75,
	0x73, 0x68, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x63, 0x0a, 0x10,
	0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x4f, 0x0a, 0x0e, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x1c, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x49, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x62, 0x72, 0x65, 0x65, 0x7a, 0x2e, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x25, 0x0a, 0x15, 0x69, 0x6f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x65,
	0x65, 0x7a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x0a, 0x42, 0x72, 0x65, 0x65,
	0x7a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_breez_proto_rawDescOnce sync.Once
	file_breez_proto_rawDescData = file_breez_proto_rawDesc
)

func file_breez_proto_rawDescGZIP() []byte {
	file_breez_proto_rawDescOnce.Do(func() {
		file_breez_proto_rawDescData = protoimpl.X.CompressGZIP(file_breez_proto_rawDescData)
	})
	return file_breez_proto_rawDescData
}

var file_breez_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_breez_proto_msgTypes = make([]protoimpl.MessageInfo, 67)
var file_breez_proto_goTypes = []interface{}{
	(GetSwapPaymentReply_SwapError)(0),                           // 0: breez.GetSwapPaymentReply.SwapError
	(JoinCTPSessionRequest_PartyType)(0),                         // 1: breez.JoinCTPSessionRequest.PartyType
	(RegisterTransactionConfirmationRequest_NotificationType)(0), // 2: breez.RegisterTransactionConfirmationRequest.NotificationType
	(*InactiveNotifyRequest)(nil),                                // 3: breez.InactiveNotifyRequest
	(*InactiveNotifyResponse)(nil),                               // 4: breez.InactiveNotifyResponse
	(*ReceiverInfoRequest)(nil),                                  // 5: breez.ReceiverInfoRequest
	(*ReceiverInfoReply)(nil),                                    // 6: breez.ReceiverInfoReply
	(*RatesRequest)(nil),                                         // 7: breez.RatesRequest
	(*Rate)(nil),                                                 // 8: breez.Rate
	(*RatesReply)(nil),                                           // 9: breez.RatesReply
	(*LSPListRequest)(nil),                                       // 10: breez.LSPListRequest
	(*LSPInformation)(nil),                                       // 11: breez.LSPInformation
	(*LSPListReply)(nil),                                         // 12: breez.LSPListReply
	(*RegisterPaymentRequest)(nil),                               // 13: breez.RegisterPaymentRequest
	(*RegisterPaymentReply)(nil),                                 // 14: breez.RegisterPaymentReply
	(*CheckChannelsRequest)(nil),                                 // 15: breez.CheckChannelsRequest
	(*CheckChannelsReply)(nil),                                   // 16: breez.CheckChannelsReply
	(*OpenLSPChannelRequest)(nil),                                // 17: breez.OpenLSPChannelRequest
	(*OpenLSPChannelReply)(nil),                                  // 18: breez.OpenLSPChannelReply
	(*OpenChannelRequest)(nil),                                   // 19: breez.OpenChannelRequest
	(*OpenChannelReply)(nil),                                     // 20: breez.OpenChannelReply
	(*OpenPublicChannelRequest)(nil),                             // 21: breez.OpenPublicChannelRequest
	(*OpenPublicChannelReply)(nil),                               // 22: breez.OpenPublicChannelReply
	(*Captcha)(nil),                                              // 23: breez.Captcha
	(*UpdateChannelPolicyRequest)(nil),                           // 24: breez.UpdateChannelPolicyRequest
	(*UpdateChannelPolicyReply)(nil),                             // 25: breez.UpdateChannelPolicyReply
	(*AddFundInitRequest)(nil),                                   // 26: breez.AddFundInitRequest
	(*AddFundInitReply)(nil),                                     // 27: breez.AddFundInitReply
	(*AddFundStatusRequest)(nil),                                 // 28: breez.AddFundStatusRequest
	(*AddFundStatusReply)(nil),                                   // 29: breez.AddFundStatusReply
	(*RemoveFundRequest)(nil),                                    // 30: breez.RemoveFundRequest
	(*RemoveFundReply)(nil),                                      // 31: breez.RemoveFundReply
	(*RedeemRemovedFundsRequest)(nil),                            // 32: breez.RedeemRemovedFundsRequest
	(*RedeemRemovedFundsReply)(nil),                              // 33: breez.RedeemRemovedFundsReply
	(*GetSwapPaymentRequest)(nil),                                // 34: breez.GetSwapPaymentRequest
	(*GetSwapPaymentReply)(nil),                                  // 35: breez.GetSwapPaymentReply
	(*RedeemSwapPaymentRequest)(nil),                             // 36: breez.RedeemSwapPaymentRequest
	(*RedeemSwapPaymentReply)(nil),                               // 37: breez.RedeemSwapPaymentReply
	(*RegisterRequest)(nil),                                      // 38: breez.RegisterRequest
	(*RegisterReply)(nil),                                        // 39: breez.RegisterReply
	(*PaymentRequest)(nil),                                       // 40: breez.PaymentRequest
	(*InvoiceReply)(nil),                                         // 41: breez.InvoiceReply
	(*UploadFileRequest)(nil),                                    // 42: breez.UploadFileRequest
	(*UploadFileReply)(nil),                                      // 43: breez.UploadFileReply
	(*PingRequest)(nil),                                          // 44: breez.PingRequest
	(*PingReply)(nil),                                            // 45: breez.PingReply
	(*OrderRequest)(nil),                                         // 46: breez.OrderRequest
	(*OrderReply)(nil),                                           // 47: breez.OrderReply
	(*SetMeetingInfoRequest)(nil),                                // 48: breez.SetMeetingInfoRequest
	(*SetMeetingInfoResponse)(nil),                               // 49: breez.SetMeetingInfoResponse
	(*GetMeetingInfoRequest)(nil),                                // 50: breez.GetMeetingInfoRequest
	(*GetMeetingInfoResponse)(nil),                               // 51: breez.GetMeetingInfoResponse
	(*JoinCTPSessionRequest)(nil),                                // 52: breez.JoinCTPSessionRequest
	(*JoinCTPSessionResponse)(nil),                               // 53: breez.JoinCTPSessionResponse
	(*TerminateCTPSessionRequest)(nil),                           // 54: breez.TerminateCTPSessionRequest
	(*TerminateCTPSessionResponse)(nil),                          // 55: breez.TerminateCTPSessionResponse
	(*RegisterTransactionConfirmationRequest)(nil),               // 56: breez.RegisterTransactionConfirmationRequest
	(*RegisterTransactionConfirmationResponse)(nil),              // 57: breez.RegisterTransactionConfirmationResponse
	(*RegisterPeriodicSyncRequest)(nil),                          // 58: breez.RegisterPeriodicSyncRequest
	(*RegisterPeriodicSyncResponse)(nil),                         // 59: breez.RegisterPeriodicSyncResponse
	(*BoltzReverseSwapLockupTx)(nil),                             // 60: breez.BoltzReverseSwapLockupTx
	(*PushTxNotificationRequest)(nil),                            // 61: breez.PushTxNotificationRequest
	(*PushTxNotificationResponse)(nil),                           // 62: breez.PushTxNotificationResponse
	(*BreezAppVersionsRequest)(nil),                              // 63: breez.BreezAppVersionsRequest
	(*BreezAppVersionsReply)(nil),                                // 64: breez.BreezAppVersionsReply
	(*GetReverseRoutingNodeRequest)(nil),                         // 65: breez.GetReverseRoutingNodeRequest
	(*GetReverseRoutingNodeReply)(nil),                           // 66: breez.GetReverseRoutingNodeReply
	nil,                                                          // 67: breez.LSPListReply.LspsEntry
	(*AddFundStatusReply_AddressStatus)(nil),                     // 68: breez.AddFundStatusReply.AddressStatus
	nil,                                                          // 69: breez.AddFundStatusReply.StatusesEntry
}
var file_breez_proto_depIdxs = []int32{
	8,  // 0: breez.RatesReply.rates:type_name -> breez.Rate
	67, // 1: breez.LSPListReply.lsps:type_name -> breez.LSPListReply.LspsEntry
	69, // 2: breez.AddFundStatusReply.statuses:type_name -> breez.AddFundStatusReply.StatusesEntry
	0,  // 3: breez.GetSwapPaymentReply.swap_error:type_name -> breez.GetSwapPaymentReply.SwapError
	1,  // 4: breez.JoinCTPSessionRequest.partyType:type_name -> breez.JoinCTPSessionRequest.PartyType
	2,  // 5: breez.RegisterTransactionConfirmationRequest.notificationType:type_name -> breez.RegisterTransactionConfirmationRequest.NotificationType
	60, // 6: breez.PushTxNotificationRequest.boltz_reverse_swap_lockup_tx_info:type_name -> breez.BoltzReverseSwapLockupTx
	11, // 7: breez.LSPListReply.LspsEntry.value:type_name -> breez.LSPInformation
	68, // 8: breez.AddFundStatusReply.StatusesEntry.value:type_name -> breez.AddFundStatusReply.AddressStatus
	38, // 9: breez.Invoicer.RegisterDevice:input_type -> breez.RegisterRequest
	40, // 10: breez.Invoicer.SendInvoice:input_type -> breez.PaymentRequest
	46, // 11: breez.CardOrderer.Order:input_type -> breez.OrderRequest
	38, // 12: breez.Pos.RegisterDevice:input_type -> breez.RegisterRequest
	42, // 13: breez.Pos.UploadLogo:input_type -> breez.UploadFileRequest
	44, // 14: breez.Information.Ping:input_type -> breez.PingRequest
	7,  // 15: breez.Information.Rates:input_type -> breez.RatesRequest
	63, // 16: breez.Information.BreezAppVersions:input_type -> breez.BreezAppVersionsRequest
	5,  // 17: breez.Information.ReceiverInfo:input_type -> breez.ReceiverInfoRequest
	10, // 18: breez.ChannelOpener.LSPList:input_type -> breez.LSPListRequest
	17, // 19: breez.ChannelOpener.OpenLSPChannel:input_type -> breez.OpenLSPChannelRequest
	13, // 20: breez.ChannelOpener.RegisterPayment:input_type -> breez.RegisterPaymentRequest
	15, // 21: breez.ChannelOpener.CheckChannels:input_type -> breez.CheckChannelsRequest
	21, // 22: breez.PublicChannelOpener.OpenPublicChannel:input_type -> breez.OpenPublicChannelRequest
	19, // 23: breez.FundManager.OpenChannel:input_type -> breez.OpenChannelRequest
	24, // 24: breez.FundManager.UpdateChannelPolicy:input_type -> breez.UpdateChannelPolicyRequest
	26, // 25: breez.FundManager.AddFundInit:input_type -> breez.AddFundInitRequest
	28, // 26: breez.FundManager.AddFundStatus:input_type -> breez.AddFundStatusRequest
	30, // 27: breez.FundManager.RemoveFund:input_type -> breez.RemoveFundRequest
	32, // 28: breez.FundManager.RedeemRemovedFunds:input_type -> breez.RedeemRemovedFundsRequest
	34, // 29: breez.FundManager.GetSwapPayment:input_type -> breez.GetSwapPaymentRequest
	56, // 30: breez.FundManager.RegisterTransactionConfirmation:input_type -> breez.RegisterTransactionConfirmationRequest
	26, // 31: breez.Swapper.AddFundInit:input_type -> breez.AddFundInitRequest
	28, // 32: breez.Swapper.AddFundStatus:input_type -> breez.AddFundStatusRequest
	34, // 33: breez.Swapper.GetSwapPayment:input_type -> breez.GetSwapPaymentRequest
	36, // 34: breez.Swapper.RedeemSwapPayment:input_type -> breez.RedeemSwapPaymentRequest
	65, // 35: breez.Swapper.GetReverseRoutingNode:input_type -> breez.GetReverseRoutingNodeRequest
	52, // 36: breez.CTP.JoinCTPSession:input_type -> breez.JoinCTPSessionRequest
	54, // 37: breez.CTP.TerminateCTPSession:input_type -> breez.TerminateCTPSessionRequest
	48, // 38: breez.Jitsi.SetMeetingInfo:input_type -> breez.SetMeetingInfoRequest
	50, // 39: breez.Jitsi.GetMeetingInfo:input_type -> breez.GetMeetingInfoRequest
	58, // 40: breez.SyncNotifier.RegisterPeriodicSync:input_type -> breez.RegisterPeriodicSyncRequest
	61, // 41: breez.PushTxNotifier.RegisterTxNotification:input_type -> breez.PushTxNotificationRequest
	3,  // 42: breez.InactiveNotifier.InactiveNotify:input_type -> breez.InactiveNotifyRequest
	39, // 43: breez.Invoicer.RegisterDevice:output_type -> breez.RegisterReply
	41, // 44: breez.Invoicer.SendInvoice:output_type -> breez.InvoiceReply
	47, // 45: breez.CardOrderer.Order:output_type -> breez.OrderReply
	39, // 46: breez.Pos.RegisterDevice:output_type -> breez.RegisterReply
	43, // 47: breez.Pos.UploadLogo:output_type -> breez.UploadFileReply
	45, // 48: breez.Information.Ping:output_type -> breez.PingReply
	9,  // 49: breez.Information.Rates:output_type -> breez.RatesReply
	64, // 50: breez.Information.BreezAppVersions:output_type -> breez.BreezAppVersionsReply
	6,  // 51: breez.Information.ReceiverInfo:output_type -> breez.ReceiverInfoReply
	12, // 52: breez.ChannelOpener.LSPList:output_type -> breez.LSPListReply
	18, // 53: breez.ChannelOpener.OpenLSPChannel:output_type -> breez.OpenLSPChannelReply
	14, // 54: breez.ChannelOpener.RegisterPayment:output_type -> breez.RegisterPaymentReply
	16, // 55: breez.ChannelOpener.CheckChannels:output_type -> breez.CheckChannelsReply
	22, // 56: breez.PublicChannelOpener.OpenPublicChannel:output_type -> breez.OpenPublicChannelReply
	20, // 57: breez.FundManager.OpenChannel:output_type -> breez.OpenChannelReply
	25, // 58: breez.FundManager.UpdateChannelPolicy:output_type -> breez.UpdateChannelPolicyReply
	27, // 59: breez.FundManager.AddFundInit:output_type -> breez.AddFundInitReply
	29, // 60: breez.FundManager.AddFundStatus:output_type -> breez.AddFundStatusReply
	31, // 61: breez.FundManager.RemoveFund:output_type -> breez.RemoveFundReply
	33, // 62: breez.FundManager.RedeemRemovedFunds:output_type -> breez.RedeemRemovedFundsReply
	35, // 63: breez.FundManager.GetSwapPayment:output_type -> breez.GetSwapPaymentReply
	57, // 64: breez.FundManager.RegisterTransactionConfirmation:output_type -> breez.RegisterTransactionConfirmationResponse
	27, // 65: breez.Swapper.AddFundInit:output_type -> breez.AddFundInitReply
	29, // 66: breez.Swapper.AddFundStatus:output_type -> breez.AddFundStatusReply
	35, // 67: breez.Swapper.GetSwapPayment:output_type -> breez.GetSwapPaymentReply
	37, // 68: breez.Swapper.RedeemSwapPayment:output_type -> breez.RedeemSwapPaymentReply
	66, // 69: breez.Swapper.GetReverseRoutingNode:output_type -> breez.GetReverseRoutingNodeReply
	53, // 70: breez.CTP.JoinCTPSession:output_type -> breez.JoinCTPSessionResponse
	55, // 71: breez.CTP.TerminateCTPSession:output_type -> breez.TerminateCTPSessionResponse
	49, // 72: breez.Jitsi.SetMeetingInfo:output_type -> breez.SetMeetingInfoResponse
	51, // 73: breez.Jitsi.GetMeetingInfo:output_type -> breez.GetMeetingInfoResponse
	59, // 74: breez.SyncNotifier.RegisterPeriodicSync:output_type -> breez.RegisterPeriodicSyncResponse
	62, // 75: breez.PushTxNotifier.RegisterTxNotification:output_type -> breez.PushTxNotificationResponse
	4,  // 76: breez.InactiveNotifier.InactiveNotify:output_type -> breez.InactiveNotifyResponse
	43, // [43:77] is the sub-list for method output_type
	9,  // [9:43] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_breez_proto_init() }
func file_breez_proto_init() {
	if File_breez_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_breez_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InactiveNotifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InactiveNotifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiverInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiverInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LSPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LSPInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LSPListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterPaymentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChannelsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenLSPChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenLSPChannelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenChannelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenPublicChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenPublicChannelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Captcha); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelPolicyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFundInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFundInitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFundStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFundStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFundReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedeemRemovedFundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedeemRemovedFundsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwapPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwapPaymentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedeemSwapPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedeemSwapPaymentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMeetingInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMeetingInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeetingInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeetingInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinCTPSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinCTPSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateCTPSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateCTPSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTransactionConfirmationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTransactionConfirmationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterPeriodicSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterPeriodicSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoltzReverseSwapLockupTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushTxNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushTxNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreezAppVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreezAppVersionsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReverseRoutingNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReverseRoutingNodeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breez_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFundStatusReply_AddressStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_breez_proto_msgTypes[58].OneofWrappers = []interface{}{
		(*PushTxNotificationRequest_BoltzReverseSwapLockupTxInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_breez_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   67,
			NumExtensions: 0,
			NumServices:   13,
		},
		GoTypes:           file_breez_proto_goTypes,
		DependencyIndexes: file_breez_proto_depIdxs,
		EnumInfos:         file_breez_proto_enumTypes,
		MessageInfos:      file_breez_proto_msgTypes,
	}.Build()
	File_breez_proto = out.File
	file_breez_proto_rawDesc = nil
	file_breez_proto_goTypes = nil
	file_breez_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InvoicerClient is the client API for Invoicer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InvoicerClient interface {
	RegisterDevice(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	SendInvoice(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*InvoiceReply, error)
}

type invoicerClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoicerClient(cc grpc.ClientConnInterface) InvoicerClient {
	return &invoicerClient{cc}
}

func (c *invoicerClient) RegisterDevice(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/breez.Invoicer/RegisterDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicerClient) SendInvoice(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*InvoiceReply, error) {
	out := new(InvoiceReply)
	err := c.cc.Invoke(ctx, "/breez.Invoicer/SendInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoicerServer is the server API for Invoicer service.
type InvoicerServer interface {
	RegisterDevice(context.Context, *RegisterRequest) (*RegisterReply, error)
	SendInvoice(context.Context, *PaymentRequest) (*InvoiceReply, error)
}

// UnimplementedInvoicerServer can be embedded to have forward compatible implementations.
type UnimplementedInvoicerServer struct {
}

func (*UnimplementedInvoicerServer) RegisterDevice(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (*UnimplementedInvoicerServer) SendInvoice(context.Context, *PaymentRequest) (*InvoiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvoice not implemented")
}

func RegisterInvoicerServer(s *grpc.Server, srv InvoicerServer) {
	s.RegisterService(&_Invoicer_serviceDesc, srv)
}

func _Invoicer_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicerServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Invoicer/RegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicerServer).RegisterDevice(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invoicer_SendInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicerServer).SendInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Invoicer/SendInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicerServer).SendInvoice(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Invoicer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.Invoicer",
	HandlerType: (*InvoicerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDevice",
			Handler:    _Invoicer_RegisterDevice_Handler,
		},
		{
			MethodName: "SendInvoice",
			Handler:    _Invoicer_SendInvoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

// CardOrdererClient is the client API for CardOrderer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CardOrdererClient interface {
	Order(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderReply, error)
}

type cardOrdererClient struct {
	cc grpc.ClientConnInterface
}

func NewCardOrdererClient(cc grpc.ClientConnInterface) CardOrdererClient {
	return &cardOrdererClient{cc}
}

func (c *cardOrdererClient) Order(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderReply, error) {
	out := new(OrderReply)
	err := c.cc.Invoke(ctx, "/breez.CardOrderer/Order", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardOrdererServer is the server API for CardOrderer service.
type CardOrdererServer interface {
	Order(context.Context, *OrderRequest) (*OrderReply, error)
}

// UnimplementedCardOrdererServer can be embedded to have forward compatible implementations.
type UnimplementedCardOrdererServer struct {
}

func (*UnimplementedCardOrdererServer) Order(context.Context, *OrderRequest) (*OrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Order not implemented")
}

func RegisterCardOrdererServer(s *grpc.Server, srv CardOrdererServer) {
	s.RegisterService(&_CardOrderer_serviceDesc, srv)
}

func _CardOrderer_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardOrdererServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.CardOrderer/Order",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardOrdererServer).Order(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CardOrderer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.CardOrderer",
	HandlerType: (*CardOrdererServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Order",
			Handler:    _CardOrderer_Order_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

// PosClient is the client API for Pos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PosClient interface {
	RegisterDevice(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	UploadLogo(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileReply, error)
}

type posClient struct {
	cc grpc.ClientConnInterface
}

func NewPosClient(cc grpc.ClientConnInterface) PosClient {
	return &posClient{cc}
}

func (c *posClient) RegisterDevice(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/breez.Pos/RegisterDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posClient) UploadLogo(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileReply, error) {
	out := new(UploadFileReply)
	err := c.cc.Invoke(ctx, "/breez.Pos/UploadLogo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PosServer is the server API for Pos service.
type PosServer interface {
	RegisterDevice(context.Context, *RegisterRequest) (*RegisterReply, error)
	UploadLogo(context.Context, *UploadFileRequest) (*UploadFileReply, error)
}

// UnimplementedPosServer can be embedded to have forward compatible implementations.
type UnimplementedPosServer struct {
}

func (*UnimplementedPosServer) RegisterDevice(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (*UnimplementedPosServer) UploadLogo(context.Context, *UploadFileRequest) (*UploadFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadLogo not implemented")
}

func RegisterPosServer(s *grpc.Server, srv PosServer) {
	s.RegisterService(&_Pos_serviceDesc, srv)
}

func _Pos_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Pos/RegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServer).RegisterDevice(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pos_UploadLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServer).UploadLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Pos/UploadLogo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServer).UploadLogo(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pos_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.Pos",
	HandlerType: (*PosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDevice",
			Handler:    _Pos_RegisterDevice_Handler,
		},
		{
			MethodName: "UploadLogo",
			Handler:    _Pos_UploadLogo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

// InformationClient is the client API for Information service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InformationClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	Rates(ctx context.Context, in *RatesRequest, opts ...grpc.CallOption) (*RatesReply, error)
	BreezAppVersions(ctx context.Context, in *BreezAppVersionsRequest, opts ...grpc.CallOption) (*BreezAppVersionsReply, error)
	ReceiverInfo(ctx context.Context, in *ReceiverInfoRequest, opts ...grpc.CallOption) (*ReceiverInfoReply, error)
}

type informationClient struct {
	cc grpc.ClientConnInterface
}

func NewInformationClient(cc grpc.ClientConnInterface) InformationClient {
	return &informationClient{cc}
}

func (c *informationClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/breez.Information/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) Rates(ctx context.Context, in *RatesRequest, opts ...grpc.CallOption) (*RatesReply, error) {
	out := new(RatesReply)
	err := c.cc.Invoke(ctx, "/breez.Information/Rates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) BreezAppVersions(ctx context.Context, in *BreezAppVersionsRequest, opts ...grpc.CallOption) (*BreezAppVersionsReply, error) {
	out := new(BreezAppVersionsReply)
	err := c.cc.Invoke(ctx, "/breez.Information/BreezAppVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) ReceiverInfo(ctx context.Context, in *ReceiverInfoRequest, opts ...grpc.CallOption) (*ReceiverInfoReply, error) {
	out := new(ReceiverInfoReply)
	err := c.cc.Invoke(ctx, "/breez.Information/ReceiverInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformationServer is the server API for Information service.
type InformationServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	Rates(context.Context, *RatesRequest) (*RatesReply, error)
	BreezAppVersions(context.Context, *BreezAppVersionsRequest) (*BreezAppVersionsReply, error)
	ReceiverInfo(context.Context, *ReceiverInfoRequest) (*ReceiverInfoReply, error)
}

// UnimplementedInformationServer can be embedded to have forward compatible implementations.
type UnimplementedInformationServer struct {
}

func (*UnimplementedInformationServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedInformationServer) Rates(context.Context, *RatesRequest) (*RatesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rates not implemented")
}
func (*UnimplementedInformationServer) BreezAppVersions(context.Context, *BreezAppVersionsRequest) (*BreezAppVersionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BreezAppVersions not implemented")
}
func (*UnimplementedInformationServer) ReceiverInfo(context.Context, *ReceiverInfoRequest) (*ReceiverInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiverInfo not implemented")
}

func RegisterInformationServer(s *grpc.Server, srv InformationServer) {
	s.RegisterService(&_Information_serviceDesc, srv)
}

func _Information_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Information/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_Rates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).Rates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Information/Rates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).Rates(ctx, req.(*RatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_BreezAppVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BreezAppVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).BreezAppVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Information/BreezAppVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).BreezAppVersions(ctx, req.(*BreezAppVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_ReceiverInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiverInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).ReceiverInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Information/ReceiverInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).ReceiverInfo(ctx, req.(*ReceiverInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Information_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.Information",
	HandlerType: (*InformationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Information_Ping_Handler,
		},
		{
			MethodName: "Rates",
			Handler:    _Information_Rates_Handler,
		},
		{
			MethodName: "BreezAppVersions",
			Handler:    _Information_BreezAppVersions_Handler,
		},
		{
			MethodName: "ReceiverInfo",
			Handler:    _Information_ReceiverInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

// ChannelOpenerClient is the client API for ChannelOpener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChannelOpenerClient interface {
	LSPList(ctx context.Context, in *LSPListRequest, opts ...grpc.CallOption) (*LSPListReply, error)
	OpenLSPChannel(ctx context.Context, in *OpenLSPChannelRequest, opts ...grpc.CallOption) (*OpenLSPChannelReply, error)
	RegisterPayment(ctx context.Context, in *RegisterPaymentRequest, opts ...grpc.CallOption) (*RegisterPaymentReply, error)
	CheckChannels(ctx context.Context, in *CheckChannelsRequest, opts ...grpc.CallOption) (*CheckChannelsReply, error)
}

type channelOpenerClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelOpenerClient(cc grpc.ClientConnInterface) ChannelOpenerClient {
	return &channelOpenerClient{cc}
}

func (c *channelOpenerClient) LSPList(ctx context.Context, in *LSPListRequest, opts ...grpc.CallOption) (*LSPListReply, error) {
	out := new(LSPListReply)
	err := c.cc.Invoke(ctx, "/breez.ChannelOpener/LSPList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelOpenerClient) OpenLSPChannel(ctx context.Context, in *OpenLSPChannelRequest, opts ...grpc.CallOption) (*OpenLSPChannelReply, error) {
	out := new(OpenLSPChannelReply)
	err := c.cc.Invoke(ctx, "/breez.ChannelOpener/OpenLSPChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelOpenerClient) RegisterPayment(ctx context.Context, in *RegisterPaymentRequest, opts ...grpc.CallOption) (*RegisterPaymentReply, error) {
	out := new(RegisterPaymentReply)
	err := c.cc.Invoke(ctx, "/breez.ChannelOpener/RegisterPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelOpenerClient) CheckChannels(ctx context.Context, in *CheckChannelsRequest, opts ...grpc.CallOption) (*CheckChannelsReply, error) {
	out := new(CheckChannelsReply)
	err := c.cc.Invoke(ctx, "/breez.ChannelOpener/CheckChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelOpenerServer is the server API for ChannelOpener service.
type ChannelOpenerServer interface {
	LSPList(context.Context, *LSPListRequest) (*LSPListReply, error)
	OpenLSPChannel(context.Context, *OpenLSPChannelRequest) (*OpenLSPChannelReply, error)
	RegisterPayment(context.Context, *RegisterPaymentRequest) (*RegisterPaymentReply, error)
	CheckChannels(context.Context, *CheckChannelsRequest) (*CheckChannelsReply, error)
}

// UnimplementedChannelOpenerServer can be embedded to have forward compatible implementations.
type UnimplementedChannelOpenerServer struct {
}

func (*UnimplementedChannelOpenerServer) LSPList(context.Context, *LSPListRequest) (*LSPListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LSPList not implemented")
}
func (*UnimplementedChannelOpenerServer) OpenLSPChannel(context.Context, *OpenLSPChannelRequest) (*OpenLSPChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenLSPChannel not implemented")
}
func (*UnimplementedChannelOpenerServer) RegisterPayment(context.Context, *RegisterPaymentRequest) (*RegisterPaymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPayment not implemented")
}
func (*UnimplementedChannelOpenerServer) CheckChannels(context.Context, *CheckChannelsRequest) (*CheckChannelsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChannels not implemented")
}

func RegisterChannelOpenerServer(s *grpc.Server, srv ChannelOpenerServer) {
	s.RegisterService(&_ChannelOpener_serviceDesc, srv)
}

func _ChannelOpener_LSPList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LSPListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelOpenerServer).LSPList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.ChannelOpener/LSPList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelOpenerServer).LSPList(ctx, req.(*LSPListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelOpener_OpenLSPChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenLSPChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelOpenerServer).OpenLSPChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.ChannelOpener/OpenLSPChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelOpenerServer).OpenLSPChannel(ctx, req.(*OpenLSPChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelOpener_RegisterPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelOpenerServer).RegisterPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.ChannelOpener/RegisterPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelOpenerServer).RegisterPayment(ctx, req.(*RegisterPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelOpener_CheckChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelOpenerServer).CheckChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.ChannelOpener/CheckChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelOpenerServer).CheckChannels(ctx, req.(*CheckChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChannelOpener_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.ChannelOpener",
	HandlerType: (*ChannelOpenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LSPList",
			Handler:    _ChannelOpener_LSPList_Handler,
		},
		{
			MethodName: "OpenLSPChannel",
			Handler:    _ChannelOpener_OpenLSPChannel_Handler,
		},
		{
			MethodName: "RegisterPayment",
			Handler:    _ChannelOpener_RegisterPayment_Handler,
		},
		{
			MethodName: "CheckChannels",
			Handler:    _ChannelOpener_CheckChannels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

// PublicChannelOpenerClient is the client API for PublicChannelOpener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicChannelOpenerClient interface {
	OpenPublicChannel(ctx context.Context, in *OpenPublicChannelRequest, opts ...grpc.CallOption) (*OpenPublicChannelReply, error)
}

type publicChannelOpenerClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicChannelOpenerClient(cc grpc.ClientConnInterface) PublicChannelOpenerClient {
	return &publicChannelOpenerClient{cc}
}

func (c *publicChannelOpenerClient) OpenPublicChannel(ctx context.Context, in *OpenPublicChannelRequest, opts ...grpc.CallOption) (*OpenPublicChannelReply, error) {
	out := new(OpenPublicChannelReply)
	err := c.cc.Invoke(ctx, "/breez.PublicChannelOpener/OpenPublicChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicChannelOpenerServer is the server API for PublicChannelOpener service.
type PublicChannelOpenerServer interface {
	OpenPublicChannel(context.Context, *OpenPublicChannelRequest) (*OpenPublicChannelReply, error)
}

// UnimplementedPublicChannelOpenerServer can be embedded to have forward compatible implementations.
type UnimplementedPublicChannelOpenerServer struct {
}

func (*UnimplementedPublicChannelOpenerServer) OpenPublicChannel(context.Context, *OpenPublicChannelRequest) (*OpenPublicChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPublicChannel not implemented")
}

func RegisterPublicChannelOpenerServer(s *grpc.Server, srv PublicChannelOpenerServer) {
	s.RegisterService(&_PublicChannelOpener_serviceDesc, srv)
}

func _PublicChannelOpener_OpenPublicChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenPublicChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicChannelOpenerServer).OpenPublicChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.PublicChannelOpener/OpenPublicChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicChannelOpenerServer).OpenPublicChannel(ctx, req.(*OpenPublicChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicChannelOpener_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.PublicChannelOpener",
	HandlerType: (*PublicChannelOpenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenPublicChannel",
			Handler:    _PublicChannelOpener_OpenPublicChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

// FundManagerClient is the client API for FundManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FundManagerClient interface {
	OpenChannel(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption) (*OpenChannelReply, error)
	UpdateChannelPolicy(ctx context.Context, in *UpdateChannelPolicyRequest, opts ...grpc.CallOption) (*UpdateChannelPolicyReply, error)
	AddFundInit(ctx context.Context, in *AddFundInitRequest, opts ...grpc.CallOption) (*AddFundInitReply, error)
	AddFundStatus(ctx context.Context, in *AddFundStatusRequest, opts ...grpc.CallOption) (*AddFundStatusReply, error)
	RemoveFund(ctx context.Context, in *RemoveFundRequest, opts ...grpc.CallOption) (*RemoveFundReply, error)
	RedeemRemovedFunds(ctx context.Context, in *RedeemRemovedFundsRequest, opts ...grpc.CallOption) (*RedeemRemovedFundsReply, error)
	GetSwapPayment(ctx context.Context, in *GetSwapPaymentRequest, opts ...grpc.CallOption) (*GetSwapPaymentReply, error)
	RegisterTransactionConfirmation(ctx context.Context, in *RegisterTransactionConfirmationRequest, opts ...grpc.CallOption) (*RegisterTransactionConfirmationResponse, error)
}

type fundManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewFundManagerClient(cc grpc.ClientConnInterface) FundManagerClient {
	return &fundManagerClient{cc}
}

func (c *fundManagerClient) OpenChannel(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption) (*OpenChannelReply, error) {
	out := new(OpenChannelReply)
	err := c.cc.Invoke(ctx, "/breez.FundManager/OpenChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundManagerClient) UpdateChannelPolicy(ctx context.Context, in *UpdateChannelPolicyRequest, opts ...grpc.CallOption) (*UpdateChannelPolicyReply, error) {
	out := new(UpdateChannelPolicyReply)
	err := c.cc.Invoke(ctx, "/breez.FundManager/UpdateChannelPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundManagerClient) AddFundInit(ctx context.Context, in *AddFundInitRequest, opts ...grpc.CallOption) (*AddFundInitReply, error) {
	out := new(AddFundInitReply)
	err := c.cc.Invoke(ctx, "/breez.FundManager/AddFundInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundManagerClient) AddFundStatus(ctx context.Context, in *AddFundStatusRequest, opts ...grpc.CallOption) (*AddFundStatusReply, error) {
	out := new(AddFundStatusReply)
	err := c.cc.Invoke(ctx, "/breez.FundManager/AddFundStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundManagerClient) RemoveFund(ctx context.Context, in *RemoveFundRequest, opts ...grpc.CallOption) (*RemoveFundReply, error) {
	out := new(RemoveFundReply)
	err := c.cc.Invoke(ctx, "/breez.FundManager/RemoveFund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundManagerClient) RedeemRemovedFunds(ctx context.Context, in *RedeemRemovedFundsRequest, opts ...grpc.CallOption) (*RedeemRemovedFundsReply, error) {
	out := new(RedeemRemovedFundsReply)
	err := c.cc.Invoke(ctx, "/breez.FundManager/RedeemRemovedFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundManagerClient) GetSwapPayment(ctx context.Context, in *GetSwapPaymentRequest, opts ...grpc.CallOption) (*GetSwapPaymentReply, error) {
	out := new(GetSwapPaymentReply)
	err := c.cc.Invoke(ctx, "/breez.FundManager/GetSwapPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundManagerClient) RegisterTransactionConfirmation(ctx context.Context, in *RegisterTransactionConfirmationRequest, opts ...grpc.CallOption) (*RegisterTransactionConfirmationResponse, error) {
	out := new(RegisterTransactionConfirmationResponse)
	err := c.cc.Invoke(ctx, "/breez.FundManager/RegisterTransactionConfirmation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FundManagerServer is the server API for FundManager service.
type FundManagerServer interface {
	OpenChannel(context.Context, *OpenChannelRequest) (*OpenChannelReply, error)
	UpdateChannelPolicy(context.Context, *UpdateChannelPolicyRequest) (*UpdateChannelPolicyReply, error)
	AddFundInit(context.Context, *AddFundInitRequest) (*AddFundInitReply, error)
	AddFundStatus(context.Context, *AddFundStatusRequest) (*AddFundStatusReply, error)
	RemoveFund(context.Context, *RemoveFundRequest) (*RemoveFundReply, error)
	RedeemRemovedFunds(context.Context, *RedeemRemovedFundsRequest) (*RedeemRemovedFundsReply, error)
	GetSwapPayment(context.Context, *GetSwapPaymentRequest) (*GetSwapPaymentReply, error)
	RegisterTransactionConfirmation(context.Context, *RegisterTransactionConfirmationRequest) (*RegisterTransactionConfirmationResponse, error)
}

// UnimplementedFundManagerServer can be embedded to have forward compatible implementations.
type UnimplementedFundManagerServer struct {
}

func (*UnimplementedFundManagerServer) OpenChannel(context.Context, *OpenChannelRequest) (*OpenChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenChannel not implemented")
}
func (*UnimplementedFundManagerServer) UpdateChannelPolicy(context.Context, *UpdateChannelPolicyRequest) (*UpdateChannelPolicyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelPolicy not implemented")
}
func (*UnimplementedFundManagerServer) AddFundInit(context.Context, *AddFundInitRequest) (*AddFundInitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFundInit not implemented")
}
func (*UnimplementedFundManagerServer) AddFundStatus(context.Context, *AddFundStatusRequest) (*AddFundStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFundStatus not implemented")
}
func (*UnimplementedFundManagerServer) RemoveFund(context.Context, *RemoveFundRequest) (*RemoveFundReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFund not implemented")
}
func (*UnimplementedFundManagerServer) RedeemRemovedFunds(context.Context, *RedeemRemovedFundsRequest) (*RedeemRemovedFundsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemRemovedFunds not implemented")
}
func (*UnimplementedFundManagerServer) GetSwapPayment(context.Context, *GetSwapPaymentRequest) (*GetSwapPaymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwapPayment not implemented")
}
func (*UnimplementedFundManagerServer) RegisterTransactionConfirmation(context.Context, *RegisterTransactionConfirmationRequest) (*RegisterTransactionConfirmationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTransactionConfirmation not implemented")
}

func RegisterFundManagerServer(s *grpc.Server, srv FundManagerServer) {
	s.RegisterService(&_FundManager_serviceDesc, srv)
}

func _FundManager_OpenChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundManagerServer).OpenChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.FundManager/OpenChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundManagerServer).OpenChannel(ctx, req.(*OpenChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundManager_UpdateChannelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundManagerServer).UpdateChannelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.FundManager/UpdateChannelPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundManagerServer).UpdateChannelPolicy(ctx, req.(*UpdateChannelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundManager_AddFundInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFundInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundManagerServer).AddFundInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.FundManager/AddFundInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundManagerServer).AddFundInit(ctx, req.(*AddFundInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundManager_AddFundStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFundStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundManagerServer).AddFundStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.FundManager/AddFundStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundManagerServer).AddFundStatus(ctx, req.(*AddFundStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundManager_RemoveFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundManagerServer).RemoveFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.FundManager/RemoveFund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundManagerServer).RemoveFund(ctx, req.(*RemoveFundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundManager_RedeemRemovedFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemRemovedFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundManagerServer).RedeemRemovedFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.FundManager/RedeemRemovedFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundManagerServer).RedeemRemovedFunds(ctx, req.(*RedeemRemovedFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundManager_GetSwapPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwapPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundManagerServer).GetSwapPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.FundManager/GetSwapPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundManagerServer).GetSwapPayment(ctx, req.(*GetSwapPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundManager_RegisterTransactionConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTransactionConfirmationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundManagerServer).RegisterTransactionConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.FundManager/RegisterTransactionConfirmation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundManagerServer).RegisterTransactionConfirmation(ctx, req.(*RegisterTransactionConfirmationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FundManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.FundManager",
	HandlerType: (*FundManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenChannel",
			Handler:    _FundManager_OpenChannel_Handler,
		},
		{
			MethodName: "UpdateChannelPolicy",
			Handler:    _FundManager_UpdateChannelPolicy_Handler,
		},
		{
			MethodName: "AddFundInit",
			Handler:    _FundManager_AddFundInit_Handler,
		},
		{
			MethodName: "AddFundStatus",
			Handler:    _FundManager_AddFundStatus_Handler,
		},
		{
			MethodName: "RemoveFund",
			Handler:    _FundManager_RemoveFund_Handler,
		},
		{
			MethodName: "RedeemRemovedFunds",
			Handler:    _FundManager_RedeemRemovedFunds_Handler,
		},
		{
			MethodName: "GetSwapPayment",
			Handler:    _FundManager_GetSwapPayment_Handler,
		},
		{
			MethodName: "RegisterTransactionConfirmation",
			Handler:    _FundManager_RegisterTransactionConfirmation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

// SwapperClient is the client API for Swapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SwapperClient interface {
	AddFundInit(ctx context.Context, in *AddFundInitRequest, opts ...grpc.CallOption) (*AddFundInitReply, error)
	AddFundStatus(ctx context.Context, in *AddFundStatusRequest, opts ...grpc.CallOption) (*AddFundStatusReply, error)
	GetSwapPayment(ctx context.Context, in *GetSwapPaymentRequest, opts ...grpc.CallOption) (*GetSwapPaymentReply, error)
	RedeemSwapPayment(ctx context.Context, in *RedeemSwapPaymentRequest, opts ...grpc.CallOption) (*RedeemSwapPaymentReply, error)
	GetReverseRoutingNode(ctx context.Context, in *GetReverseRoutingNodeRequest, opts ...grpc.CallOption) (*GetReverseRoutingNodeReply, error)
}

type swapperClient struct {
	cc grpc.ClientConnInterface
}

func NewSwapperClient(cc grpc.ClientConnInterface) SwapperClient {
	return &swapperClient{cc}
}

func (c *swapperClient) AddFundInit(ctx context.Context, in *AddFundInitRequest, opts ...grpc.CallOption) (*AddFundInitReply, error) {
	out := new(AddFundInitReply)
	err := c.cc.Invoke(ctx, "/breez.Swapper/AddFundInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapperClient) AddFundStatus(ctx context.Context, in *AddFundStatusRequest, opts ...grpc.CallOption) (*AddFundStatusReply, error) {
	out := new(AddFundStatusReply)
	err := c.cc.Invoke(ctx, "/breez.Swapper/AddFundStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapperClient) GetSwapPayment(ctx context.Context, in *GetSwapPaymentRequest, opts ...grpc.CallOption) (*GetSwapPaymentReply, error) {
	out := new(GetSwapPaymentReply)
	err := c.cc.Invoke(ctx, "/breez.Swapper/GetSwapPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapperClient) RedeemSwapPayment(ctx context.Context, in *RedeemSwapPaymentRequest, opts ...grpc.CallOption) (*RedeemSwapPaymentReply, error) {
	out := new(RedeemSwapPaymentReply)
	err := c.cc.Invoke(ctx, "/breez.Swapper/RedeemSwapPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapperClient) GetReverseRoutingNode(ctx context.Context, in *GetReverseRoutingNodeRequest, opts ...grpc.CallOption) (*GetReverseRoutingNodeReply, error) {
	out := new(GetReverseRoutingNodeReply)
	err := c.cc.Invoke(ctx, "/breez.Swapper/GetReverseRoutingNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwapperServer is the server API for Swapper service.
type SwapperServer interface {
	AddFundInit(context.Context, *AddFundInitRequest) (*AddFundInitReply, error)
	AddFundStatus(context.Context, *AddFundStatusRequest) (*AddFundStatusReply, error)
	GetSwapPayment(context.Context, *GetSwapPaymentRequest) (*GetSwapPaymentReply, error)
	RedeemSwapPayment(context.Context, *RedeemSwapPaymentRequest) (*RedeemSwapPaymentReply, error)
	GetReverseRoutingNode(context.Context, *GetReverseRoutingNodeRequest) (*GetReverseRoutingNodeReply, error)
}

// UnimplementedSwapperServer can be embedded to have forward compatible implementations.
type UnimplementedSwapperServer struct {
}

func (*UnimplementedSwapperServer) AddFundInit(context.Context, *AddFundInitRequest) (*AddFundInitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFundInit not implemented")
}
func (*UnimplementedSwapperServer) AddFundStatus(context.Context, *AddFundStatusRequest) (*AddFundStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFundStatus not implemented")
}
func (*UnimplementedSwapperServer) GetSwapPayment(context.Context, *GetSwapPaymentRequest) (*GetSwapPaymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwapPayment not implemented")
}
func (*UnimplementedSwapperServer) RedeemSwapPayment(context.Context, *RedeemSwapPaymentRequest) (*RedeemSwapPaymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemSwapPayment not implemented")
}
func (*UnimplementedSwapperServer) GetReverseRoutingNode(context.Context, *GetReverseRoutingNodeRequest) (*GetReverseRoutingNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReverseRoutingNode not implemented")
}

func RegisterSwapperServer(s *grpc.Server, srv SwapperServer) {
	s.RegisterService(&_Swapper_serviceDesc, srv)
}

func _Swapper_AddFundInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFundInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapperServer).AddFundInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Swapper/AddFundInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapperServer).AddFundInit(ctx, req.(*AddFundInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swapper_AddFundStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFundStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapperServer).AddFundStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Swapper/AddFundStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapperServer).AddFundStatus(ctx, req.(*AddFundStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swapper_GetSwapPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwapPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapperServer).GetSwapPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Swapper/GetSwapPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapperServer).GetSwapPayment(ctx, req.(*GetSwapPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swapper_RedeemSwapPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemSwapPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapperServer).RedeemSwapPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Swapper/RedeemSwapPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapperServer).RedeemSwapPayment(ctx, req.(*RedeemSwapPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swapper_GetReverseRoutingNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReverseRoutingNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapperServer).GetReverseRoutingNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Swapper/GetReverseRoutingNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapperServer).GetReverseRoutingNode(ctx, req.(*GetReverseRoutingNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Swapper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.Swapper",
	HandlerType: (*SwapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFundInit",
			Handler:    _Swapper_AddFundInit_Handler,
		},
		{
			MethodName: "AddFundStatus",
			Handler:    _Swapper_AddFundStatus_Handler,
		},
		{
			MethodName: "GetSwapPayment",
			Handler:    _Swapper_GetSwapPayment_Handler,
		},
		{
			MethodName: "RedeemSwapPayment",
			Handler:    _Swapper_RedeemSwapPayment_Handler,
		},
		{
			MethodName: "GetReverseRoutingNode",
			Handler:    _Swapper_GetReverseRoutingNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

// CTPClient is the client API for CTP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CTPClient interface {
	JoinCTPSession(ctx context.Context, in *JoinCTPSessionRequest, opts ...grpc.CallOption) (*JoinCTPSessionResponse, error)
	TerminateCTPSession(ctx context.Context, in *TerminateCTPSessionRequest, opts ...grpc.CallOption) (*TerminateCTPSessionResponse, error)
}

type cTPClient struct {
	cc grpc.ClientConnInterface
}

func NewCTPClient(cc grpc.ClientConnInterface) CTPClient {
	return &cTPClient{cc}
}

func (c *cTPClient) JoinCTPSession(ctx context.Context, in *JoinCTPSessionRequest, opts ...grpc.CallOption) (*JoinCTPSessionResponse, error) {
	out := new(JoinCTPSessionResponse)
	err := c.cc.Invoke(ctx, "/breez.CTP/JoinCTPSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cTPClient) TerminateCTPSession(ctx context.Context, in *TerminateCTPSessionRequest, opts ...grpc.CallOption) (*TerminateCTPSessionResponse, error) {
	out := new(TerminateCTPSessionResponse)
	err := c.cc.Invoke(ctx, "/breez.CTP/TerminateCTPSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CTPServer is the server API for CTP service.
type CTPServer interface {
	JoinCTPSession(context.Context, *JoinCTPSessionRequest) (*JoinCTPSessionResponse, error)
	TerminateCTPSession(context.Context, *TerminateCTPSessionRequest) (*TerminateCTPSessionResponse, error)
}

// UnimplementedCTPServer can be embedded to have forward compatible implementations.
type UnimplementedCTPServer struct {
}

func (*UnimplementedCTPServer) JoinCTPSession(context.Context, *JoinCTPSessionRequest) (*JoinCTPSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCTPSession not implemented")
}
func (*UnimplementedCTPServer) TerminateCTPSession(context.Context, *TerminateCTPSessionRequest) (*TerminateCTPSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateCTPSession not implemented")
}

func RegisterCTPServer(s *grpc.Server, srv CTPServer) {
	s.RegisterService(&_CTP_serviceDesc, srv)
}

func _CTP_JoinCTPSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinCTPSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CTPServer).JoinCTPSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.CTP/JoinCTPSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CTPServer).JoinCTPSession(ctx, req.(*JoinCTPSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CTP_TerminateCTPSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateCTPSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CTPServer).TerminateCTPSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.CTP/TerminateCTPSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CTPServer).TerminateCTPSession(ctx, req.(*TerminateCTPSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CTP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.CTP",
	HandlerType: (*CTPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinCTPSession",
			Handler:    _CTP_JoinCTPSession_Handler,
		},
		{
			MethodName: "TerminateCTPSession",
			Handler:    _CTP_TerminateCTPSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

// JitsiClient is the client API for Jitsi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JitsiClient interface {
	SetMeetingInfo(ctx context.Context, in *SetMeetingInfoRequest, opts ...grpc.CallOption) (*SetMeetingInfoResponse, error)
	GetMeetingInfo(ctx context.Context, in *GetMeetingInfoRequest, opts ...grpc.CallOption) (*GetMeetingInfoResponse, error)
}

type jitsiClient struct {
	cc grpc.ClientConnInterface
}

func NewJitsiClient(cc grpc.ClientConnInterface) JitsiClient {
	return &jitsiClient{cc}
}

func (c *jitsiClient) SetMeetingInfo(ctx context.Context, in *SetMeetingInfoRequest, opts ...grpc.CallOption) (*SetMeetingInfoResponse, error) {
	out := new(SetMeetingInfoResponse)
	err := c.cc.Invoke(ctx, "/breez.Jitsi/SetMeetingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jitsiClient) GetMeetingInfo(ctx context.Context, in *GetMeetingInfoRequest, opts ...grpc.CallOption) (*GetMeetingInfoResponse, error) {
	out := new(GetMeetingInfoResponse)
	err := c.cc.Invoke(ctx, "/breez.Jitsi/GetMeetingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JitsiServer is the server API for Jitsi service.
type JitsiServer interface {
	SetMeetingInfo(context.Context, *SetMeetingInfoRequest) (*SetMeetingInfoResponse, error)
	GetMeetingInfo(context.Context, *GetMeetingInfoRequest) (*GetMeetingInfoResponse, error)
}

// UnimplementedJitsiServer can be embedded to have forward compatible implementations.
type UnimplementedJitsiServer struct {
}

func (*UnimplementedJitsiServer) SetMeetingInfo(context.Context, *SetMeetingInfoRequest) (*SetMeetingInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMeetingInfo not implemented")
}
func (*UnimplementedJitsiServer) GetMeetingInfo(context.Context, *GetMeetingInfoRequest) (*GetMeetingInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeetingInfo not implemented")
}

func RegisterJitsiServer(s *grpc.Server, srv JitsiServer) {
	s.RegisterService(&_Jitsi_serviceDesc, srv)
}

func _Jitsi_SetMeetingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMeetingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JitsiServer).SetMeetingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Jitsi/SetMeetingInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JitsiServer).SetMeetingInfo(ctx, req.(*SetMeetingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jitsi_GetMeetingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeetingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JitsiServer).GetMeetingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Jitsi/GetMeetingInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JitsiServer).GetMeetingInfo(ctx, req.(*GetMeetingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Jitsi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.Jitsi",
	HandlerType: (*JitsiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetMeetingInfo",
			Handler:    _Jitsi_SetMeetingInfo_Handler,
		},
		{
			MethodName: "GetMeetingInfo",
			Handler:    _Jitsi_GetMeetingInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

// SyncNotifierClient is the client API for SyncNotifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SyncNotifierClient interface {
	RegisterPeriodicSync(ctx context.Context, in *RegisterPeriodicSyncRequest, opts ...grpc.CallOption) (*RegisterPeriodicSyncResponse, error)
}

type syncNotifierClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncNotifierClient(cc grpc.ClientConnInterface) SyncNotifierClient {
	return &syncNotifierClient{cc}
}

func (c *syncNotifierClient) RegisterPeriodicSync(ctx context.Context, in *RegisterPeriodicSyncRequest, opts ...grpc.CallOption) (*RegisterPeriodicSyncResponse, error) {
	out := new(RegisterPeriodicSyncResponse)
	err := c.cc.Invoke(ctx, "/breez.SyncNotifier/RegisterPeriodicSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncNotifierServer is the server API for SyncNotifier service.
type SyncNotifierServer interface {
	RegisterPeriodicSync(context.Context, *RegisterPeriodicSyncRequest) (*RegisterPeriodicSyncResponse, error)
}

// UnimplementedSyncNotifierServer can be embedded to have forward compatible implementations.
type UnimplementedSyncNotifierServer struct {
}

func (*UnimplementedSyncNotifierServer) RegisterPeriodicSync(context.Context, *RegisterPeriodicSyncRequest) (*RegisterPeriodicSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPeriodicSync not implemented")
}

func RegisterSyncNotifierServer(s *grpc.Server, srv SyncNotifierServer) {
	s.RegisterService(&_SyncNotifier_serviceDesc, srv)
}

func _SyncNotifier_RegisterPeriodicSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPeriodicSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncNotifierServer).RegisterPeriodicSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.SyncNotifier/RegisterPeriodicSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncNotifierServer).RegisterPeriodicSync(ctx, req.(*RegisterPeriodicSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SyncNotifier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.SyncNotifier",
	HandlerType: (*SyncNotifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPeriodicSync",
			Handler:    _SyncNotifier_RegisterPeriodicSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

// PushTxNotifierClient is the client API for PushTxNotifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PushTxNotifierClient interface {
	RegisterTxNotification(ctx context.Context, in *PushTxNotificationRequest, opts ...grpc.CallOption) (*PushTxNotificationResponse, error)
}

type pushTxNotifierClient struct {
	cc grpc.ClientConnInterface
}

func NewPushTxNotifierClient(cc grpc.ClientConnInterface) PushTxNotifierClient {
	return &pushTxNotifierClient{cc}
}

func (c *pushTxNotifierClient) RegisterTxNotification(ctx context.Context, in *PushTxNotificationRequest, opts ...grpc.CallOption) (*PushTxNotificationResponse, error) {
	out := new(PushTxNotificationResponse)
	err := c.cc.Invoke(ctx, "/breez.PushTxNotifier/RegisterTxNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushTxNotifierServer is the server API for PushTxNotifier service.
type PushTxNotifierServer interface {
	RegisterTxNotification(context.Context, *PushTxNotificationRequest) (*PushTxNotificationResponse, error)
}

// UnimplementedPushTxNotifierServer can be embedded to have forward compatible implementations.
type UnimplementedPushTxNotifierServer struct {
}

func (*UnimplementedPushTxNotifierServer) RegisterTxNotification(context.Context, *PushTxNotificationRequest) (*PushTxNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTxNotification not implemented")
}

func RegisterPushTxNotifierServer(s *grpc.Server, srv PushTxNotifierServer) {
	s.RegisterService(&_PushTxNotifier_serviceDesc, srv)
}

func _PushTxNotifier_RegisterTxNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushTxNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushTxNotifierServer).RegisterTxNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.PushTxNotifier/RegisterTxNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushTxNotifierServer).RegisterTxNotification(ctx, req.(*PushTxNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PushTxNotifier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.PushTxNotifier",
	HandlerType: (*PushTxNotifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTxNotification",
			Handler:    _PushTxNotifier_RegisterTxNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

// InactiveNotifierClient is the client API for InactiveNotifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InactiveNotifierClient interface {
	InactiveNotify(ctx context.Context, in *InactiveNotifyRequest, opts ...grpc.CallOption) (*InactiveNotifyResponse, error)
}

type inactiveNotifierClient struct {
	cc grpc.ClientConnInterface
}

func NewInactiveNotifierClient(cc grpc.ClientConnInterface) InactiveNotifierClient {
	return &inactiveNotifierClient{cc}
}

func (c *inactiveNotifierClient) InactiveNotify(ctx context.Context, in *InactiveNotifyRequest, opts ...grpc.CallOption) (*InactiveNotifyResponse, error) {
	out := new(InactiveNotifyResponse)
	err := c.cc.Invoke(ctx, "/breez.InactiveNotifier/InactiveNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InactiveNotifierServer is the server API for InactiveNotifier service.
type InactiveNotifierServer interface {
	InactiveNotify(context.Context, *InactiveNotifyRequest) (*InactiveNotifyResponse, error)
}

// UnimplementedInactiveNotifierServer can be embedded to have forward compatible implementations.
type UnimplementedInactiveNotifierServer struct {
}

func (*UnimplementedInactiveNotifierServer) InactiveNotify(context.Context, *InactiveNotifyRequest) (*InactiveNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InactiveNotify not implemented")
}

func RegisterInactiveNotifierServer(s *grpc.Server, srv InactiveNotifierServer) {
	s.RegisterService(&_InactiveNotifier_serviceDesc, srv)
}

func _InactiveNotifier_InactiveNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InactiveNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InactiveNotifierServer).InactiveNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.InactiveNotifier/InactiveNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InactiveNotifierServer).InactiveNotify(ctx, req.(*InactiveNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InactiveNotifier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.InactiveNotifier",
	HandlerType: (*InactiveNotifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InactiveNotify",
			Handler:    _InactiveNotifier_InactiveNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}
