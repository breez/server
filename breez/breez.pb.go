// Code generated by protoc-gen-go. DO NOT EDIT.
// source: breez.proto

/*
Package breez is a generated protocol buffer package.

It is generated from these files:
	breez.proto

It has these top-level messages:
	OpenChannelRequest
	OpenChannelReply
	UpdateChannelPolicyRequest
	UpdateChannelPolicyReply
	AddFundInitRequest
	AddFundInitReply
	AddFundStatusRequest
	AddFundStatusReply
	RemoveFundRequest
	RemoveFundReply
	RedeemRemovedFundsRequest
	RedeemRemovedFundsReply
	FundRequest
	FundReply
	GetSwapPaymentRequest
	GetSwapPaymentReply
	RegisterRequest
	RegisterReply
	PaymentRequest
	InvoiceReply
	UploadFileRequest
	UploadFileReply
	PingRequest
	PingReply
	OrderRequest
	OrderReply
	JoinCTPSessionRequest
	JoinCTPSessionResponse
	TerminateCTPSessionRequest
	TerminateCTPSessionResponse
	RegisterTransactionConfirmationRequest
	RegisterTransactionConfirmationResponse
	RegisterPeriodicSyncRequest
	RegisterPeriodicSyncResponse
*/
package breez

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FundReply_ReturnCode int32

const (
	FundReply_SUCCESS               FundReply_ReturnCode = 0
	FundReply_UNKNOWN_ERROR         FundReply_ReturnCode = -1
	FundReply_NODE_BUSY             FundReply_ReturnCode = -2
	FundReply_CLIENT_NOT_REGISTERED FundReply_ReturnCode = -3
	FundReply_WRONG_NODE_ID         FundReply_ReturnCode = -4
	FundReply_WRONG_AMOUNT          FundReply_ReturnCode = -5
)

var FundReply_ReturnCode_name = map[int32]string{
	0:  "SUCCESS",
	-1: "UNKNOWN_ERROR",
	-2: "NODE_BUSY",
	-3: "CLIENT_NOT_REGISTERED",
	-4: "WRONG_NODE_ID",
	-5: "WRONG_AMOUNT",
}
var FundReply_ReturnCode_value = map[string]int32{
	"SUCCESS":               0,
	"UNKNOWN_ERROR":         -1,
	"NODE_BUSY":             -2,
	"CLIENT_NOT_REGISTERED": -3,
	"WRONG_NODE_ID":         -4,
	"WRONG_AMOUNT":          -5,
}

func (x FundReply_ReturnCode) String() string {
	return proto.EnumName(FundReply_ReturnCode_name, int32(x))
}
func (FundReply_ReturnCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13, 0} }

type JoinCTPSessionRequest_PartyType int32

const (
	JoinCTPSessionRequest_PAYER JoinCTPSessionRequest_PartyType = 0
	JoinCTPSessionRequest_PAYEE JoinCTPSessionRequest_PartyType = 1
)

var JoinCTPSessionRequest_PartyType_name = map[int32]string{
	0: "PAYER",
	1: "PAYEE",
}
var JoinCTPSessionRequest_PartyType_value = map[string]int32{
	"PAYER": 0,
	"PAYEE": 1,
}

func (x JoinCTPSessionRequest_PartyType) String() string {
	return proto.EnumName(JoinCTPSessionRequest_PartyType_name, int32(x))
}
func (JoinCTPSessionRequest_PartyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26, 0}
}

type RegisterTransactionConfirmationRequest_NotificationType int32

const (
	RegisterTransactionConfirmationRequest_READY_RECEIVE_PAYMENT RegisterTransactionConfirmationRequest_NotificationType = 0
	RegisterTransactionConfirmationRequest_CHANNEL_OPENED        RegisterTransactionConfirmationRequest_NotificationType = 1
)

var RegisterTransactionConfirmationRequest_NotificationType_name = map[int32]string{
	0: "READY_RECEIVE_PAYMENT",
	1: "CHANNEL_OPENED",
}
var RegisterTransactionConfirmationRequest_NotificationType_value = map[string]int32{
	"READY_RECEIVE_PAYMENT": 0,
	"CHANNEL_OPENED":        1,
}

func (x RegisterTransactionConfirmationRequest_NotificationType) String() string {
	return proto.EnumName(RegisterTransactionConfirmationRequest_NotificationType_name, int32(x))
}
func (RegisterTransactionConfirmationRequest_NotificationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{30, 0}
}

type OpenChannelRequest struct {
	PubKey            string `protobuf:"bytes,1,opt,name=pubKey" json:"pubKey,omitempty"`
	NotificationToken string `protobuf:"bytes,2,opt,name=notificationToken" json:"notificationToken,omitempty"`
}

func (m *OpenChannelRequest) Reset()                    { *m = OpenChannelRequest{} }
func (m *OpenChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenChannelRequest) ProtoMessage()               {}
func (*OpenChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OpenChannelRequest) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *OpenChannelRequest) GetNotificationToken() string {
	if m != nil {
		return m.NotificationToken
	}
	return ""
}

type OpenChannelReply struct {
}

func (m *OpenChannelReply) Reset()                    { *m = OpenChannelReply{} }
func (m *OpenChannelReply) String() string            { return proto.CompactTextString(m) }
func (*OpenChannelReply) ProtoMessage()               {}
func (*OpenChannelReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type UpdateChannelPolicyRequest struct {
	PubKey string `protobuf:"bytes,1,opt,name=pubKey" json:"pubKey,omitempty"`
}

func (m *UpdateChannelPolicyRequest) Reset()                    { *m = UpdateChannelPolicyRequest{} }
func (m *UpdateChannelPolicyRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateChannelPolicyRequest) ProtoMessage()               {}
func (*UpdateChannelPolicyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpdateChannelPolicyRequest) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

type UpdateChannelPolicyReply struct {
}

func (m *UpdateChannelPolicyReply) Reset()                    { *m = UpdateChannelPolicyReply{} }
func (m *UpdateChannelPolicyReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateChannelPolicyReply) ProtoMessage()               {}
func (*UpdateChannelPolicyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type AddFundInitRequest struct {
	NodeID            string `protobuf:"bytes,1,opt,name=nodeID" json:"nodeID,omitempty"`
	NotificationToken string `protobuf:"bytes,2,opt,name=notificationToken" json:"notificationToken,omitempty"`
	Pubkey            []byte `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Hash              []byte `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *AddFundInitRequest) Reset()                    { *m = AddFundInitRequest{} }
func (m *AddFundInitRequest) String() string            { return proto.CompactTextString(m) }
func (*AddFundInitRequest) ProtoMessage()               {}
func (*AddFundInitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AddFundInitRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *AddFundInitRequest) GetNotificationToken() string {
	if m != nil {
		return m.NotificationToken
	}
	return ""
}

func (m *AddFundInitRequest) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *AddFundInitRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type AddFundInitReply struct {
	Address           string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Pubkey            []byte `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	LockHeight        int64  `protobuf:"varint,3,opt,name=lockHeight" json:"lockHeight,omitempty"`
	MaxAllowedDeposit int64  `protobuf:"varint,4,opt,name=maxAllowedDeposit" json:"maxAllowedDeposit,omitempty"`
	ErrorMessage      string `protobuf:"bytes,5,opt,name=errorMessage" json:"errorMessage,omitempty"`
}

func (m *AddFundInitReply) Reset()                    { *m = AddFundInitReply{} }
func (m *AddFundInitReply) String() string            { return proto.CompactTextString(m) }
func (*AddFundInitReply) ProtoMessage()               {}
func (*AddFundInitReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddFundInitReply) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddFundInitReply) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *AddFundInitReply) GetLockHeight() int64 {
	if m != nil {
		return m.LockHeight
	}
	return 0
}

func (m *AddFundInitReply) GetMaxAllowedDeposit() int64 {
	if m != nil {
		return m.MaxAllowedDeposit
	}
	return 0
}

func (m *AddFundInitReply) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type AddFundStatusRequest struct {
	Addresses         []string `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
	NotificationToken string   `protobuf:"bytes,2,opt,name=notificationToken" json:"notificationToken,omitempty"`
}

func (m *AddFundStatusRequest) Reset()                    { *m = AddFundStatusRequest{} }
func (m *AddFundStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*AddFundStatusRequest) ProtoMessage()               {}
func (*AddFundStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AddFundStatusRequest) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *AddFundStatusRequest) GetNotificationToken() string {
	if m != nil {
		return m.NotificationToken
	}
	return ""
}

type AddFundStatusReply struct {
	Statuses map[string]*AddFundStatusReply_AddressStatus `protobuf:"bytes,1,rep,name=statuses" json:"statuses,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AddFundStatusReply) Reset()                    { *m = AddFundStatusReply{} }
func (m *AddFundStatusReply) String() string            { return proto.CompactTextString(m) }
func (*AddFundStatusReply) ProtoMessage()               {}
func (*AddFundStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AddFundStatusReply) GetStatuses() map[string]*AddFundStatusReply_AddressStatus {
	if m != nil {
		return m.Statuses
	}
	return nil
}

type AddFundStatusReply_AddressStatus struct {
	Tx        string `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
	Amount    int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Confirmed bool   `protobuf:"varint,3,opt,name=confirmed" json:"confirmed,omitempty"`
	BlockHash string `protobuf:"bytes,4,opt,name=blockHash" json:"blockHash,omitempty"`
}

func (m *AddFundStatusReply_AddressStatus) Reset()         { *m = AddFundStatusReply_AddressStatus{} }
func (m *AddFundStatusReply_AddressStatus) String() string { return proto.CompactTextString(m) }
func (*AddFundStatusReply_AddressStatus) ProtoMessage()    {}
func (*AddFundStatusReply_AddressStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 0}
}

func (m *AddFundStatusReply_AddressStatus) GetTx() string {
	if m != nil {
		return m.Tx
	}
	return ""
}

func (m *AddFundStatusReply_AddressStatus) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *AddFundStatusReply_AddressStatus) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

func (m *AddFundStatusReply_AddressStatus) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

type RemoveFundRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Amount  int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *RemoveFundRequest) Reset()                    { *m = RemoveFundRequest{} }
func (m *RemoveFundRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveFundRequest) ProtoMessage()               {}
func (*RemoveFundRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RemoveFundRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RemoveFundRequest) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type RemoveFundReply struct {
	PaymentRequest string `protobuf:"bytes,1,opt,name=paymentRequest" json:"paymentRequest,omitempty"`
	ErrorMessage   string `protobuf:"bytes,2,opt,name=errorMessage" json:"errorMessage,omitempty"`
}

func (m *RemoveFundReply) Reset()                    { *m = RemoveFundReply{} }
func (m *RemoveFundReply) String() string            { return proto.CompactTextString(m) }
func (*RemoveFundReply) ProtoMessage()               {}
func (*RemoveFundReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RemoveFundReply) GetPaymentRequest() string {
	if m != nil {
		return m.PaymentRequest
	}
	return ""
}

func (m *RemoveFundReply) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type RedeemRemovedFundsRequest struct {
	Paymenthash string `protobuf:"bytes,1,opt,name=paymenthash" json:"paymenthash,omitempty"`
}

func (m *RedeemRemovedFundsRequest) Reset()                    { *m = RedeemRemovedFundsRequest{} }
func (m *RedeemRemovedFundsRequest) String() string            { return proto.CompactTextString(m) }
func (*RedeemRemovedFundsRequest) ProtoMessage()               {}
func (*RedeemRemovedFundsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RedeemRemovedFundsRequest) GetPaymenthash() string {
	if m != nil {
		return m.Paymenthash
	}
	return ""
}

type RedeemRemovedFundsReply struct {
	Txid string `protobuf:"bytes,1,opt,name=txid" json:"txid,omitempty"`
}

func (m *RedeemRemovedFundsReply) Reset()                    { *m = RedeemRemovedFundsReply{} }
func (m *RedeemRemovedFundsReply) String() string            { return proto.CompactTextString(m) }
func (*RedeemRemovedFundsReply) ProtoMessage()               {}
func (*RedeemRemovedFundsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RedeemRemovedFundsReply) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

type FundRequest struct {
	DeviceID    string `protobuf:"bytes,1,opt,name=deviceID" json:"deviceID,omitempty"`
	LightningID string `protobuf:"bytes,2,opt,name=lightningID" json:"lightningID,omitempty"`
	Amount      int64  `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
}

func (m *FundRequest) Reset()                    { *m = FundRequest{} }
func (m *FundRequest) String() string            { return proto.CompactTextString(m) }
func (*FundRequest) ProtoMessage()               {}
func (*FundRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *FundRequest) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *FundRequest) GetLightningID() string {
	if m != nil {
		return m.LightningID
	}
	return ""
}

func (m *FundRequest) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type FundReply struct {
	ReturnCode FundReply_ReturnCode `protobuf:"varint,1,opt,name=returnCode,enum=breez.FundReply_ReturnCode" json:"returnCode,omitempty"`
}

func (m *FundReply) Reset()                    { *m = FundReply{} }
func (m *FundReply) String() string            { return proto.CompactTextString(m) }
func (*FundReply) ProtoMessage()               {}
func (*FundReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *FundReply) GetReturnCode() FundReply_ReturnCode {
	if m != nil {
		return m.ReturnCode
	}
	return FundReply_SUCCESS
}

type GetSwapPaymentRequest struct {
	PaymentRequest string `protobuf:"bytes,1,opt,name=paymentRequest" json:"paymentRequest,omitempty"`
}

func (m *GetSwapPaymentRequest) Reset()                    { *m = GetSwapPaymentRequest{} }
func (m *GetSwapPaymentRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSwapPaymentRequest) ProtoMessage()               {}
func (*GetSwapPaymentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetSwapPaymentRequest) GetPaymentRequest() string {
	if m != nil {
		return m.PaymentRequest
	}
	return ""
}

type GetSwapPaymentReply struct {
	PaymentError string `protobuf:"bytes,1,opt,name=paymentError" json:"paymentError,omitempty"`
}

func (m *GetSwapPaymentReply) Reset()                    { *m = GetSwapPaymentReply{} }
func (m *GetSwapPaymentReply) String() string            { return proto.CompactTextString(m) }
func (*GetSwapPaymentReply) ProtoMessage()               {}
func (*GetSwapPaymentReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetSwapPaymentReply) GetPaymentError() string {
	if m != nil {
		return m.PaymentError
	}
	return ""
}

// The request message containing the device id and lightning id
type RegisterRequest struct {
	DeviceID    string `protobuf:"bytes,1,opt,name=deviceID" json:"deviceID,omitempty"`
	LightningID string `protobuf:"bytes,2,opt,name=lightningID" json:"lightningID,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *RegisterRequest) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *RegisterRequest) GetLightningID() string {
	if m != nil {
		return m.LightningID
	}
	return ""
}

// The response message containing the breez id
type RegisterReply struct {
	BreezID string `protobuf:"bytes,1,opt,name=breezID" json:"breezID,omitempty"`
}

func (m *RegisterReply) Reset()                    { *m = RegisterReply{} }
func (m *RegisterReply) String() string            { return proto.CompactTextString(m) }
func (*RegisterReply) ProtoMessage()               {}
func (*RegisterReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *RegisterReply) GetBreezID() string {
	if m != nil {
		return m.BreezID
	}
	return ""
}

type PaymentRequest struct {
	BreezID string `protobuf:"bytes,1,opt,name=breezID" json:"breezID,omitempty"`
	Invoice string `protobuf:"bytes,2,opt,name=invoice" json:"invoice,omitempty"`
	Payee   string `protobuf:"bytes,3,opt,name=payee" json:"payee,omitempty"`
	Amount  int64  `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
}

func (m *PaymentRequest) Reset()                    { *m = PaymentRequest{} }
func (m *PaymentRequest) String() string            { return proto.CompactTextString(m) }
func (*PaymentRequest) ProtoMessage()               {}
func (*PaymentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *PaymentRequest) GetBreezID() string {
	if m != nil {
		return m.BreezID
	}
	return ""
}

func (m *PaymentRequest) GetInvoice() string {
	if m != nil {
		return m.Invoice
	}
	return ""
}

func (m *PaymentRequest) GetPayee() string {
	if m != nil {
		return m.Payee
	}
	return ""
}

func (m *PaymentRequest) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type InvoiceReply struct {
	Error string `protobuf:"bytes,1,opt,name=Error" json:"Error,omitempty"`
}

func (m *InvoiceReply) Reset()                    { *m = InvoiceReply{} }
func (m *InvoiceReply) String() string            { return proto.CompactTextString(m) }
func (*InvoiceReply) ProtoMessage()               {}
func (*InvoiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *InvoiceReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type UploadFileRequest struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *UploadFileRequest) Reset()                    { *m = UploadFileRequest{} }
func (m *UploadFileRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadFileRequest) ProtoMessage()               {}
func (*UploadFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *UploadFileRequest) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type UploadFileReply struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *UploadFileReply) Reset()                    { *m = UploadFileReply{} }
func (m *UploadFileReply) String() string            { return proto.CompactTextString(m) }
func (*UploadFileReply) ProtoMessage()               {}
func (*UploadFileReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *UploadFileReply) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type PingReply struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *PingReply) Reset()                    { *m = PingReply{} }
func (m *PingReply) String() string            { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()               {}
func (*PingReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *PingReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type OrderRequest struct {
	FullName string `protobuf:"bytes,1,opt,name=FullName" json:"FullName,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=Address" json:"Address,omitempty"`
	City     string `protobuf:"bytes,3,opt,name=City" json:"City,omitempty"`
	State    string `protobuf:"bytes,4,opt,name=State" json:"State,omitempty"`
	Zip      string `protobuf:"bytes,5,opt,name=Zip" json:"Zip,omitempty"`
	Country  string `protobuf:"bytes,6,opt,name=Country" json:"Country,omitempty"`
	Email    string `protobuf:"bytes,7,opt,name=Email" json:"Email,omitempty"`
}

func (m *OrderRequest) Reset()                    { *m = OrderRequest{} }
func (m *OrderRequest) String() string            { return proto.CompactTextString(m) }
func (*OrderRequest) ProtoMessage()               {}
func (*OrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *OrderRequest) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *OrderRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *OrderRequest) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *OrderRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *OrderRequest) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

func (m *OrderRequest) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *OrderRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type OrderReply struct {
}

func (m *OrderReply) Reset()                    { *m = OrderReply{} }
func (m *OrderReply) String() string            { return proto.CompactTextString(m) }
func (*OrderReply) ProtoMessage()               {}
func (*OrderReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type JoinCTPSessionRequest struct {
	PartyType         JoinCTPSessionRequest_PartyType `protobuf:"varint,1,opt,name=partyType,enum=breez.JoinCTPSessionRequest_PartyType" json:"partyType,omitempty"`
	PartyName         string                          `protobuf:"bytes,2,opt,name=partyName" json:"partyName,omitempty"`
	NotificationToken string                          `protobuf:"bytes,3,opt,name=notificationToken" json:"notificationToken,omitempty"`
	SessionID         string                          `protobuf:"bytes,4,opt,name=sessionID" json:"sessionID,omitempty"`
}

func (m *JoinCTPSessionRequest) Reset()                    { *m = JoinCTPSessionRequest{} }
func (m *JoinCTPSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinCTPSessionRequest) ProtoMessage()               {}
func (*JoinCTPSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *JoinCTPSessionRequest) GetPartyType() JoinCTPSessionRequest_PartyType {
	if m != nil {
		return m.PartyType
	}
	return JoinCTPSessionRequest_PAYER
}

func (m *JoinCTPSessionRequest) GetPartyName() string {
	if m != nil {
		return m.PartyName
	}
	return ""
}

func (m *JoinCTPSessionRequest) GetNotificationToken() string {
	if m != nil {
		return m.NotificationToken
	}
	return ""
}

func (m *JoinCTPSessionRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type JoinCTPSessionResponse struct {
	SessionID string `protobuf:"bytes,1,opt,name=sessionID" json:"sessionID,omitempty"`
	Expiry    int64  `protobuf:"varint,2,opt,name=expiry" json:"expiry,omitempty"`
}

func (m *JoinCTPSessionResponse) Reset()                    { *m = JoinCTPSessionResponse{} }
func (m *JoinCTPSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*JoinCTPSessionResponse) ProtoMessage()               {}
func (*JoinCTPSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *JoinCTPSessionResponse) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *JoinCTPSessionResponse) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

type TerminateCTPSessionRequest struct {
	SessionID string `protobuf:"bytes,1,opt,name=sessionID" json:"sessionID,omitempty"`
}

func (m *TerminateCTPSessionRequest) Reset()                    { *m = TerminateCTPSessionRequest{} }
func (m *TerminateCTPSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*TerminateCTPSessionRequest) ProtoMessage()               {}
func (*TerminateCTPSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *TerminateCTPSessionRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type TerminateCTPSessionResponse struct {
}

func (m *TerminateCTPSessionResponse) Reset()                    { *m = TerminateCTPSessionResponse{} }
func (m *TerminateCTPSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*TerminateCTPSessionResponse) ProtoMessage()               {}
func (*TerminateCTPSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

type RegisterTransactionConfirmationRequest struct {
	TxID              string                                                  `protobuf:"bytes,1,opt,name=txID" json:"txID,omitempty"`
	NotificationToken string                                                  `protobuf:"bytes,2,opt,name=notificationToken" json:"notificationToken,omitempty"`
	NotificationType  RegisterTransactionConfirmationRequest_NotificationType `protobuf:"varint,3,opt,name=notificationType,enum=breez.RegisterTransactionConfirmationRequest_NotificationType" json:"notificationType,omitempty"`
}

func (m *RegisterTransactionConfirmationRequest) Reset() {
	*m = RegisterTransactionConfirmationRequest{}
}
func (m *RegisterTransactionConfirmationRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterTransactionConfirmationRequest) ProtoMessage()    {}
func (*RegisterTransactionConfirmationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{30}
}

func (m *RegisterTransactionConfirmationRequest) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *RegisterTransactionConfirmationRequest) GetNotificationToken() string {
	if m != nil {
		return m.NotificationToken
	}
	return ""
}

func (m *RegisterTransactionConfirmationRequest) GetNotificationType() RegisterTransactionConfirmationRequest_NotificationType {
	if m != nil {
		return m.NotificationType
	}
	return RegisterTransactionConfirmationRequest_READY_RECEIVE_PAYMENT
}

type RegisterTransactionConfirmationResponse struct {
}

func (m *RegisterTransactionConfirmationResponse) Reset() {
	*m = RegisterTransactionConfirmationResponse{}
}
func (m *RegisterTransactionConfirmationResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterTransactionConfirmationResponse) ProtoMessage()    {}
func (*RegisterTransactionConfirmationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{31}
}

type RegisterPeriodicSyncRequest struct {
	NotificationToken string `protobuf:"bytes,1,opt,name=notificationToken" json:"notificationToken,omitempty"`
}

func (m *RegisterPeriodicSyncRequest) Reset()                    { *m = RegisterPeriodicSyncRequest{} }
func (m *RegisterPeriodicSyncRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterPeriodicSyncRequest) ProtoMessage()               {}
func (*RegisterPeriodicSyncRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *RegisterPeriodicSyncRequest) GetNotificationToken() string {
	if m != nil {
		return m.NotificationToken
	}
	return ""
}

type RegisterPeriodicSyncResponse struct {
}

func (m *RegisterPeriodicSyncResponse) Reset()                    { *m = RegisterPeriodicSyncResponse{} }
func (m *RegisterPeriodicSyncResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterPeriodicSyncResponse) ProtoMessage()               {}
func (*RegisterPeriodicSyncResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func init() {
	proto.RegisterType((*OpenChannelRequest)(nil), "breez.OpenChannelRequest")
	proto.RegisterType((*OpenChannelReply)(nil), "breez.OpenChannelReply")
	proto.RegisterType((*UpdateChannelPolicyRequest)(nil), "breez.UpdateChannelPolicyRequest")
	proto.RegisterType((*UpdateChannelPolicyReply)(nil), "breez.UpdateChannelPolicyReply")
	proto.RegisterType((*AddFundInitRequest)(nil), "breez.AddFundInitRequest")
	proto.RegisterType((*AddFundInitReply)(nil), "breez.AddFundInitReply")
	proto.RegisterType((*AddFundStatusRequest)(nil), "breez.AddFundStatusRequest")
	proto.RegisterType((*AddFundStatusReply)(nil), "breez.AddFundStatusReply")
	proto.RegisterType((*AddFundStatusReply_AddressStatus)(nil), "breez.AddFundStatusReply.AddressStatus")
	proto.RegisterType((*RemoveFundRequest)(nil), "breez.RemoveFundRequest")
	proto.RegisterType((*RemoveFundReply)(nil), "breez.RemoveFundReply")
	proto.RegisterType((*RedeemRemovedFundsRequest)(nil), "breez.RedeemRemovedFundsRequest")
	proto.RegisterType((*RedeemRemovedFundsReply)(nil), "breez.RedeemRemovedFundsReply")
	proto.RegisterType((*FundRequest)(nil), "breez.FundRequest")
	proto.RegisterType((*FundReply)(nil), "breez.FundReply")
	proto.RegisterType((*GetSwapPaymentRequest)(nil), "breez.GetSwapPaymentRequest")
	proto.RegisterType((*GetSwapPaymentReply)(nil), "breez.GetSwapPaymentReply")
	proto.RegisterType((*RegisterRequest)(nil), "breez.RegisterRequest")
	proto.RegisterType((*RegisterReply)(nil), "breez.RegisterReply")
	proto.RegisterType((*PaymentRequest)(nil), "breez.PaymentRequest")
	proto.RegisterType((*InvoiceReply)(nil), "breez.InvoiceReply")
	proto.RegisterType((*UploadFileRequest)(nil), "breez.UploadFileRequest")
	proto.RegisterType((*UploadFileReply)(nil), "breez.UploadFileReply")
	proto.RegisterType((*PingRequest)(nil), "breez.PingRequest")
	proto.RegisterType((*PingReply)(nil), "breez.PingReply")
	proto.RegisterType((*OrderRequest)(nil), "breez.OrderRequest")
	proto.RegisterType((*OrderReply)(nil), "breez.OrderReply")
	proto.RegisterType((*JoinCTPSessionRequest)(nil), "breez.JoinCTPSessionRequest")
	proto.RegisterType((*JoinCTPSessionResponse)(nil), "breez.JoinCTPSessionResponse")
	proto.RegisterType((*TerminateCTPSessionRequest)(nil), "breez.TerminateCTPSessionRequest")
	proto.RegisterType((*TerminateCTPSessionResponse)(nil), "breez.TerminateCTPSessionResponse")
	proto.RegisterType((*RegisterTransactionConfirmationRequest)(nil), "breez.RegisterTransactionConfirmationRequest")
	proto.RegisterType((*RegisterTransactionConfirmationResponse)(nil), "breez.RegisterTransactionConfirmationResponse")
	proto.RegisterType((*RegisterPeriodicSyncRequest)(nil), "breez.RegisterPeriodicSyncRequest")
	proto.RegisterType((*RegisterPeriodicSyncResponse)(nil), "breez.RegisterPeriodicSyncResponse")
	proto.RegisterEnum("breez.FundReply_ReturnCode", FundReply_ReturnCode_name, FundReply_ReturnCode_value)
	proto.RegisterEnum("breez.JoinCTPSessionRequest_PartyType", JoinCTPSessionRequest_PartyType_name, JoinCTPSessionRequest_PartyType_value)
	proto.RegisterEnum("breez.RegisterTransactionConfirmationRequest_NotificationType", RegisterTransactionConfirmationRequest_NotificationType_name, RegisterTransactionConfirmationRequest_NotificationType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Invoicer service

type InvoicerClient interface {
	RegisterDevice(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	SendInvoice(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*InvoiceReply, error)
}

type invoicerClient struct {
	cc *grpc.ClientConn
}

func NewInvoicerClient(cc *grpc.ClientConn) InvoicerClient {
	return &invoicerClient{cc}
}

func (c *invoicerClient) RegisterDevice(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := grpc.Invoke(ctx, "/breez.Invoicer/RegisterDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicerClient) SendInvoice(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*InvoiceReply, error) {
	out := new(InvoiceReply)
	err := grpc.Invoke(ctx, "/breez.Invoicer/SendInvoice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Invoicer service

type InvoicerServer interface {
	RegisterDevice(context.Context, *RegisterRequest) (*RegisterReply, error)
	SendInvoice(context.Context, *PaymentRequest) (*InvoiceReply, error)
}

func RegisterInvoicerServer(s *grpc.Server, srv InvoicerServer) {
	s.RegisterService(&_Invoicer_serviceDesc, srv)
}

func _Invoicer_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicerServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Invoicer/RegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicerServer).RegisterDevice(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invoicer_SendInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicerServer).SendInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Invoicer/SendInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicerServer).SendInvoice(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Invoicer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.Invoicer",
	HandlerType: (*InvoicerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDevice",
			Handler:    _Invoicer_RegisterDevice_Handler,
		},
		{
			MethodName: "SendInvoice",
			Handler:    _Invoicer_SendInvoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

// Client API for CardOrderer service

type CardOrdererClient interface {
	Order(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderReply, error)
}

type cardOrdererClient struct {
	cc *grpc.ClientConn
}

func NewCardOrdererClient(cc *grpc.ClientConn) CardOrdererClient {
	return &cardOrdererClient{cc}
}

func (c *cardOrdererClient) Order(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderReply, error) {
	out := new(OrderReply)
	err := grpc.Invoke(ctx, "/breez.CardOrderer/Order", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CardOrderer service

type CardOrdererServer interface {
	Order(context.Context, *OrderRequest) (*OrderReply, error)
}

func RegisterCardOrdererServer(s *grpc.Server, srv CardOrdererServer) {
	s.RegisterService(&_CardOrderer_serviceDesc, srv)
}

func _CardOrderer_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardOrdererServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.CardOrderer/Order",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardOrdererServer).Order(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CardOrderer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.CardOrderer",
	HandlerType: (*CardOrdererServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Order",
			Handler:    _CardOrderer_Order_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

// Client API for Pos service

type PosClient interface {
	RegisterDevice(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	UploadLogo(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileReply, error)
}

type posClient struct {
	cc *grpc.ClientConn
}

func NewPosClient(cc *grpc.ClientConn) PosClient {
	return &posClient{cc}
}

func (c *posClient) RegisterDevice(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := grpc.Invoke(ctx, "/breez.Pos/RegisterDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posClient) UploadLogo(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileReply, error) {
	out := new(UploadFileReply)
	err := grpc.Invoke(ctx, "/breez.Pos/UploadLogo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pos service

type PosServer interface {
	RegisterDevice(context.Context, *RegisterRequest) (*RegisterReply, error)
	UploadLogo(context.Context, *UploadFileRequest) (*UploadFileReply, error)
}

func RegisterPosServer(s *grpc.Server, srv PosServer) {
	s.RegisterService(&_Pos_serviceDesc, srv)
}

func _Pos_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Pos/RegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServer).RegisterDevice(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pos_UploadLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServer).UploadLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Pos/UploadLogo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServer).UploadLogo(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pos_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.Pos",
	HandlerType: (*PosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDevice",
			Handler:    _Pos_RegisterDevice_Handler,
		},
		{
			MethodName: "UploadLogo",
			Handler:    _Pos_UploadLogo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

// Client API for Information service

type InformationClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
}

type informationClient struct {
	cc *grpc.ClientConn
}

func NewInformationClient(cc *grpc.ClientConn) InformationClient {
	return &informationClient{cc}
}

func (c *informationClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := grpc.Invoke(ctx, "/breez.Information/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Information service

type InformationServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
}

func RegisterInformationServer(s *grpc.Server, srv InformationServer) {
	s.RegisterService(&_Information_serviceDesc, srv)
}

func _Information_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.Information/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Information_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.Information",
	HandlerType: (*InformationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Information_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

// Client API for FundManager service

type FundManagerClient interface {
	OpenChannel(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption) (*OpenChannelReply, error)
	UpdateChannelPolicy(ctx context.Context, in *UpdateChannelPolicyRequest, opts ...grpc.CallOption) (*UpdateChannelPolicyReply, error)
	AddFundInit(ctx context.Context, in *AddFundInitRequest, opts ...grpc.CallOption) (*AddFundInitReply, error)
	AddFundStatus(ctx context.Context, in *AddFundStatusRequest, opts ...grpc.CallOption) (*AddFundStatusReply, error)
	RemoveFund(ctx context.Context, in *RemoveFundRequest, opts ...grpc.CallOption) (*RemoveFundReply, error)
	RedeemRemovedFunds(ctx context.Context, in *RedeemRemovedFundsRequest, opts ...grpc.CallOption) (*RedeemRemovedFundsReply, error)
	GetSwapPayment(ctx context.Context, in *GetSwapPaymentRequest, opts ...grpc.CallOption) (*GetSwapPaymentReply, error)
	RegisterTransactionConfirmation(ctx context.Context, in *RegisterTransactionConfirmationRequest, opts ...grpc.CallOption) (*RegisterTransactionConfirmationResponse, error)
}

type fundManagerClient struct {
	cc *grpc.ClientConn
}

func NewFundManagerClient(cc *grpc.ClientConn) FundManagerClient {
	return &fundManagerClient{cc}
}

func (c *fundManagerClient) OpenChannel(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption) (*OpenChannelReply, error) {
	out := new(OpenChannelReply)
	err := grpc.Invoke(ctx, "/breez.FundManager/OpenChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundManagerClient) UpdateChannelPolicy(ctx context.Context, in *UpdateChannelPolicyRequest, opts ...grpc.CallOption) (*UpdateChannelPolicyReply, error) {
	out := new(UpdateChannelPolicyReply)
	err := grpc.Invoke(ctx, "/breez.FundManager/UpdateChannelPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundManagerClient) AddFundInit(ctx context.Context, in *AddFundInitRequest, opts ...grpc.CallOption) (*AddFundInitReply, error) {
	out := new(AddFundInitReply)
	err := grpc.Invoke(ctx, "/breez.FundManager/AddFundInit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundManagerClient) AddFundStatus(ctx context.Context, in *AddFundStatusRequest, opts ...grpc.CallOption) (*AddFundStatusReply, error) {
	out := new(AddFundStatusReply)
	err := grpc.Invoke(ctx, "/breez.FundManager/AddFundStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundManagerClient) RemoveFund(ctx context.Context, in *RemoveFundRequest, opts ...grpc.CallOption) (*RemoveFundReply, error) {
	out := new(RemoveFundReply)
	err := grpc.Invoke(ctx, "/breez.FundManager/RemoveFund", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundManagerClient) RedeemRemovedFunds(ctx context.Context, in *RedeemRemovedFundsRequest, opts ...grpc.CallOption) (*RedeemRemovedFundsReply, error) {
	out := new(RedeemRemovedFundsReply)
	err := grpc.Invoke(ctx, "/breez.FundManager/RedeemRemovedFunds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundManagerClient) GetSwapPayment(ctx context.Context, in *GetSwapPaymentRequest, opts ...grpc.CallOption) (*GetSwapPaymentReply, error) {
	out := new(GetSwapPaymentReply)
	err := grpc.Invoke(ctx, "/breez.FundManager/GetSwapPayment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundManagerClient) RegisterTransactionConfirmation(ctx context.Context, in *RegisterTransactionConfirmationRequest, opts ...grpc.CallOption) (*RegisterTransactionConfirmationResponse, error) {
	out := new(RegisterTransactionConfirmationResponse)
	err := grpc.Invoke(ctx, "/breez.FundManager/RegisterTransactionConfirmation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FundManager service

type FundManagerServer interface {
	OpenChannel(context.Context, *OpenChannelRequest) (*OpenChannelReply, error)
	UpdateChannelPolicy(context.Context, *UpdateChannelPolicyRequest) (*UpdateChannelPolicyReply, error)
	AddFundInit(context.Context, *AddFundInitRequest) (*AddFundInitReply, error)
	AddFundStatus(context.Context, *AddFundStatusRequest) (*AddFundStatusReply, error)
	RemoveFund(context.Context, *RemoveFundRequest) (*RemoveFundReply, error)
	RedeemRemovedFunds(context.Context, *RedeemRemovedFundsRequest) (*RedeemRemovedFundsReply, error)
	GetSwapPayment(context.Context, *GetSwapPaymentRequest) (*GetSwapPaymentReply, error)
	RegisterTransactionConfirmation(context.Context, *RegisterTransactionConfirmationRequest) (*RegisterTransactionConfirmationResponse, error)
}

func RegisterFundManagerServer(s *grpc.Server, srv FundManagerServer) {
	s.RegisterService(&_FundManager_serviceDesc, srv)
}

func _FundManager_OpenChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundManagerServer).OpenChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.FundManager/OpenChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundManagerServer).OpenChannel(ctx, req.(*OpenChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundManager_UpdateChannelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundManagerServer).UpdateChannelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.FundManager/UpdateChannelPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundManagerServer).UpdateChannelPolicy(ctx, req.(*UpdateChannelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundManager_AddFundInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFundInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundManagerServer).AddFundInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.FundManager/AddFundInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundManagerServer).AddFundInit(ctx, req.(*AddFundInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundManager_AddFundStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFundStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundManagerServer).AddFundStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.FundManager/AddFundStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundManagerServer).AddFundStatus(ctx, req.(*AddFundStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundManager_RemoveFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundManagerServer).RemoveFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.FundManager/RemoveFund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundManagerServer).RemoveFund(ctx, req.(*RemoveFundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundManager_RedeemRemovedFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemRemovedFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundManagerServer).RedeemRemovedFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.FundManager/RedeemRemovedFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundManagerServer).RedeemRemovedFunds(ctx, req.(*RedeemRemovedFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundManager_GetSwapPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwapPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundManagerServer).GetSwapPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.FundManager/GetSwapPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundManagerServer).GetSwapPayment(ctx, req.(*GetSwapPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundManager_RegisterTransactionConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTransactionConfirmationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundManagerServer).RegisterTransactionConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.FundManager/RegisterTransactionConfirmation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundManagerServer).RegisterTransactionConfirmation(ctx, req.(*RegisterTransactionConfirmationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FundManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.FundManager",
	HandlerType: (*FundManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenChannel",
			Handler:    _FundManager_OpenChannel_Handler,
		},
		{
			MethodName: "UpdateChannelPolicy",
			Handler:    _FundManager_UpdateChannelPolicy_Handler,
		},
		{
			MethodName: "AddFundInit",
			Handler:    _FundManager_AddFundInit_Handler,
		},
		{
			MethodName: "AddFundStatus",
			Handler:    _FundManager_AddFundStatus_Handler,
		},
		{
			MethodName: "RemoveFund",
			Handler:    _FundManager_RemoveFund_Handler,
		},
		{
			MethodName: "RedeemRemovedFunds",
			Handler:    _FundManager_RedeemRemovedFunds_Handler,
		},
		{
			MethodName: "GetSwapPayment",
			Handler:    _FundManager_GetSwapPayment_Handler,
		},
		{
			MethodName: "RegisterTransactionConfirmation",
			Handler:    _FundManager_RegisterTransactionConfirmation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

// Client API for CTP service

type CTPClient interface {
	JoinCTPSession(ctx context.Context, in *JoinCTPSessionRequest, opts ...grpc.CallOption) (*JoinCTPSessionResponse, error)
	TerminateCTPSession(ctx context.Context, in *TerminateCTPSessionRequest, opts ...grpc.CallOption) (*TerminateCTPSessionResponse, error)
}

type cTPClient struct {
	cc *grpc.ClientConn
}

func NewCTPClient(cc *grpc.ClientConn) CTPClient {
	return &cTPClient{cc}
}

func (c *cTPClient) JoinCTPSession(ctx context.Context, in *JoinCTPSessionRequest, opts ...grpc.CallOption) (*JoinCTPSessionResponse, error) {
	out := new(JoinCTPSessionResponse)
	err := grpc.Invoke(ctx, "/breez.CTP/JoinCTPSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cTPClient) TerminateCTPSession(ctx context.Context, in *TerminateCTPSessionRequest, opts ...grpc.CallOption) (*TerminateCTPSessionResponse, error) {
	out := new(TerminateCTPSessionResponse)
	err := grpc.Invoke(ctx, "/breez.CTP/TerminateCTPSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CTP service

type CTPServer interface {
	JoinCTPSession(context.Context, *JoinCTPSessionRequest) (*JoinCTPSessionResponse, error)
	TerminateCTPSession(context.Context, *TerminateCTPSessionRequest) (*TerminateCTPSessionResponse, error)
}

func RegisterCTPServer(s *grpc.Server, srv CTPServer) {
	s.RegisterService(&_CTP_serviceDesc, srv)
}

func _CTP_JoinCTPSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinCTPSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CTPServer).JoinCTPSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.CTP/JoinCTPSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CTPServer).JoinCTPSession(ctx, req.(*JoinCTPSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CTP_TerminateCTPSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateCTPSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CTPServer).TerminateCTPSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.CTP/TerminateCTPSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CTPServer).TerminateCTPSession(ctx, req.(*TerminateCTPSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CTP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.CTP",
	HandlerType: (*CTPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinCTPSession",
			Handler:    _CTP_JoinCTPSession_Handler,
		},
		{
			MethodName: "TerminateCTPSession",
			Handler:    _CTP_TerminateCTPSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

// Client API for SyncNotifier service

type SyncNotifierClient interface {
	RegisterPeriodicSync(ctx context.Context, in *RegisterPeriodicSyncRequest, opts ...grpc.CallOption) (*RegisterPeriodicSyncResponse, error)
}

type syncNotifierClient struct {
	cc *grpc.ClientConn
}

func NewSyncNotifierClient(cc *grpc.ClientConn) SyncNotifierClient {
	return &syncNotifierClient{cc}
}

func (c *syncNotifierClient) RegisterPeriodicSync(ctx context.Context, in *RegisterPeriodicSyncRequest, opts ...grpc.CallOption) (*RegisterPeriodicSyncResponse, error) {
	out := new(RegisterPeriodicSyncResponse)
	err := grpc.Invoke(ctx, "/breez.SyncNotifier/RegisterPeriodicSync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SyncNotifier service

type SyncNotifierServer interface {
	RegisterPeriodicSync(context.Context, *RegisterPeriodicSyncRequest) (*RegisterPeriodicSyncResponse, error)
}

func RegisterSyncNotifierServer(s *grpc.Server, srv SyncNotifierServer) {
	s.RegisterService(&_SyncNotifier_serviceDesc, srv)
}

func _SyncNotifier_RegisterPeriodicSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPeriodicSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncNotifierServer).RegisterPeriodicSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breez.SyncNotifier/RegisterPeriodicSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncNotifierServer).RegisterPeriodicSync(ctx, req.(*RegisterPeriodicSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SyncNotifier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breez.SyncNotifier",
	HandlerType: (*SyncNotifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPeriodicSync",
			Handler:    _SyncNotifier_RegisterPeriodicSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breez.proto",
}

func init() { proto.RegisterFile("breez.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1613 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x73, 0xdb, 0xc6,
	0x15, 0x17, 0x48, 0xd1, 0x16, 0x1f, 0x29, 0x06, 0x5a, 0x7d, 0x84, 0x82, 0x14, 0x47, 0xd9, 0x34,
	0x8e, 0x33, 0x53, 0x73, 0xa6, 0x6a, 0x0f, 0x6d, 0x32, 0x6e, 0x4d, 0x81, 0xb0, 0xc3, 0x5a, 0x22,
	0x39, 0x20, 0xd5, 0x54, 0xe9, 0xb4, 0x1c, 0x88, 0x58, 0x53, 0xa8, 0x40, 0x00, 0x01, 0x40, 0x45,
	0xec, 0xb1, 0x87, 0xce, 0xe4, 0x4f, 0xe8, 0x7f, 0xd0, 0x53, 0xa7, 0x87, 0x4e, 0xfe, 0xa8, 0x5e,
	0x7b, 0xec, 0xe7, 0xec, 0x17, 0x08, 0x90, 0xa0, 0x6c, 0xcd, 0x98, 0x27, 0xbc, 0xb7, 0x6f, 0x7f,
	0xef, 0x73, 0xdf, 0xbe, 0x25, 0x54, 0x2e, 0x43, 0x42, 0xfe, 0xd0, 0x08, 0x42, 0x3f, 0xf6, 0x51,
	0x89, 0x11, 0xf8, 0x6b, 0x40, 0xdd, 0x80, 0x78, 0xfa, 0x95, 0xe5, 0x79, 0xc4, 0x35, 0xc9, 0x37,
	0x53, 0x12, 0xc5, 0x68, 0x0f, 0x1e, 0x04, 0xd3, 0xcb, 0x57, 0x64, 0x56, 0x57, 0x8e, 0x94, 0x27,
	0x65, 0x53, 0x50, 0xe8, 0x87, 0xb0, 0xe5, 0xf9, 0xb1, 0xf3, 0xda, 0x19, 0x59, 0xb1, 0xe3, 0x7b,
	0x03, 0xff, 0x9a, 0x78, 0xf5, 0x02, 0x13, 0x59, 0x5e, 0xc0, 0x08, 0xd4, 0x0c, 0x76, 0xe0, 0xce,
	0xf0, 0x4f, 0x40, 0x3b, 0x0f, 0x6c, 0x2b, 0x26, 0x82, 0xdb, 0xf3, 0x5d, 0x67, 0x34, 0x7b, 0x83,
	0x5e, 0xac, 0x41, 0x3d, 0x77, 0x17, 0x45, 0xfc, 0x93, 0x02, 0xa8, 0x69, 0xdb, 0x2f, 0xa6, 0x9e,
	0xdd, 0xf6, 0x9c, 0x38, 0x05, 0xe5, 0xf9, 0x36, 0x69, 0xb7, 0x24, 0x14, 0xa7, 0xee, 0xe7, 0x82,
	0x30, 0xe8, 0x9a, 0xcc, 0xea, 0xc5, 0x23, 0xe5, 0x49, 0xd5, 0x14, 0x14, 0x42, 0xb0, 0x7e, 0x65,
	0x45, 0x57, 0xf5, 0x75, 0xc6, 0x65, 0xdf, 0xf8, 0x7b, 0x05, 0xd4, 0x8c, 0x21, 0x81, 0x3b, 0x43,
	0x75, 0x78, 0x68, 0xd9, 0x76, 0x48, 0xa2, 0x48, 0xd8, 0x21, 0xc9, 0x14, 0x74, 0x21, 0x03, 0xfd,
	0x08, 0xc0, 0xf5, 0x47, 0xd7, 0x5f, 0x12, 0x67, 0x7c, 0x15, 0x33, 0xb5, 0x45, 0x33, 0xc5, 0xa1,
	0x0e, 0x4c, 0xac, 0xdb, 0xa6, 0xeb, 0xfa, 0xdf, 0x12, 0xbb, 0x45, 0x02, 0x3f, 0x72, 0x62, 0x66,
	0x47, 0xd1, 0x5c, 0x5e, 0x40, 0x18, 0xaa, 0x24, 0x0c, 0xfd, 0xf0, 0x8c, 0x44, 0x91, 0x35, 0x26,
	0xf5, 0x12, 0x33, 0x22, 0xc3, 0xc3, 0x97, 0xb0, 0x23, 0xec, 0xee, 0xc7, 0x56, 0x3c, 0x8d, 0x64,
	0x08, 0x0f, 0xa1, 0x2c, 0x8c, 0x25, 0xd4, 0xfa, 0xe2, 0x93, 0xb2, 0x39, 0x67, 0xdc, 0xb3, 0x16,
	0xfe, 0x5e, 0x48, 0xb2, 0x24, 0x95, 0xd0, 0xf0, 0xe8, 0xb0, 0x11, 0x31, 0x52, 0x68, 0xa8, 0x1c,
	0x7f, 0xda, 0xe0, 0x55, 0xba, 0x2c, 0xdc, 0xe8, 0x0b, 0x49, 0xc3, 0x8b, 0xc3, 0x99, 0x99, 0x6c,
	0xd4, 0x22, 0xd8, 0x6c, 0x72, 0xb3, 0xb8, 0x04, 0xaa, 0x41, 0x21, 0xbe, 0x15, 0xf1, 0x2e, 0xc4,
	0xb7, 0x34, 0xd4, 0xd6, 0xc4, 0x9f, 0x7a, 0x31, 0xb3, 0xaf, 0x68, 0x0a, 0x8a, 0x3a, 0x38, 0xf2,
	0xbd, 0xd7, 0x4e, 0x38, 0x21, 0x36, 0x8b, 0xf4, 0x86, 0x39, 0x67, 0xd0, 0xd5, 0x4b, 0x16, 0x77,
	0x99, 0xe8, 0xb2, 0x39, 0x67, 0x68, 0x36, 0x6c, 0x66, 0xec, 0x41, 0x2a, 0x14, 0xaf, 0x93, 0xc2,
	0xa5, 0x9f, 0xe8, 0x19, 0x94, 0x6e, 0x2c, 0x77, 0x4a, 0x98, 0xd6, 0x3b, 0x3d, 0xcb, 0x98, 0x6f,
	0xf2, 0x5d, 0x9f, 0x17, 0x7e, 0xaa, 0x60, 0x03, 0xb6, 0x4c, 0x32, 0xf1, 0x6f, 0x08, 0xdd, 0x21,
	0xf3, 0x72, 0x67, 0x4d, 0xe5, 0x39, 0x8a, 0x7f, 0x0b, 0xef, 0xa5, 0x61, 0x68, 0xe4, 0x1f, 0x43,
	0x2d, 0xb0, 0x66, 0x13, 0xe2, 0xc9, 0x13, 0x23, 0xb0, 0x16, 0xb8, 0x4b, 0x05, 0x54, 0xc8, 0x29,
	0xa0, 0x67, 0xb0, 0x6f, 0x12, 0x9b, 0x90, 0x09, 0x57, 0xc2, 0xdc, 0x4b, 0xaa, 0xe8, 0x08, 0x2a,
	0x02, 0x92, 0x9d, 0x18, 0xae, 0x25, 0xcd, 0xc2, 0x4f, 0xe1, 0xfd, 0xbc, 0xed, 0xd4, 0x4a, 0x04,
	0xeb, 0xf1, 0xad, 0x63, 0x8b, 0x5d, 0xec, 0x1b, 0x8f, 0xa0, 0x92, 0x8e, 0x86, 0x06, 0x1b, 0x36,
	0xb9, 0x71, 0x46, 0xf3, 0xa3, 0x9e, 0xd0, 0x54, 0xb7, 0x4b, 0x0f, 0x8d, 0xe7, 0x78, 0xe3, 0x76,
	0x4b, 0xd8, 0x9e, 0x66, 0xa5, 0x22, 0x56, 0xcc, 0x44, 0xec, 0x9f, 0x0a, 0x94, 0xe7, 0xc1, 0xfa,
	0x02, 0x20, 0x24, 0xf1, 0x34, 0xf4, 0x74, 0xdf, 0x26, 0x4c, 0x4b, 0xed, 0xf8, 0x40, 0xa4, 0x33,
	0x91, 0x6a, 0x98, 0x89, 0x88, 0x99, 0x12, 0xc7, 0x7f, 0x51, 0x00, 0xe6, 0x4b, 0xa8, 0x02, 0x0f,
	0xfb, 0xe7, 0xba, 0x6e, 0xf4, 0xfb, 0xea, 0x1a, 0xd2, 0x60, 0xf3, 0xbc, 0xf3, 0xaa, 0xd3, 0xfd,
	0xaa, 0x33, 0x34, 0x4c, 0xb3, 0x6b, 0xaa, 0xff, 0x93, 0x3f, 0x05, 0xed, 0x41, 0xb9, 0xd3, 0x6d,
	0x19, 0xc3, 0x93, 0xf3, 0xfe, 0x85, 0xfa, 0xdf, 0x39, 0x1f, 0xc3, 0xae, 0x7e, 0xda, 0x36, 0x3a,
	0x83, 0x61, 0xa7, 0x3b, 0x18, 0x9a, 0xc6, 0xcb, 0x76, 0x7f, 0x60, 0x98, 0x46, 0x4b, 0xfd, 0xcf,
	0x5c, 0x46, 0x83, 0xcd, 0xaf, 0xcc, 0x6e, 0xe7, 0xe5, 0x90, 0x21, 0xb4, 0x5b, 0xea, 0xbf, 0xe7,
	0x6b, 0xfb, 0x50, 0xe5, 0x6b, 0xcd, 0xb3, 0xee, 0x79, 0x67, 0xa0, 0xfe, 0x2b, 0x59, 0xc2, 0xbf,
	0x80, 0xdd, 0x97, 0x24, 0xee, 0x7f, 0x6b, 0x05, 0xbd, 0x6c, 0x15, 0xbc, 0x65, 0xb5, 0xe0, 0x9f,
	0xc1, 0xf6, 0x22, 0x00, 0x8d, 0x1f, 0x86, 0xaa, 0x10, 0x34, 0x68, 0xdd, 0x88, 0xcd, 0x19, 0x1e,
	0xee, 0xd2, 0x1a, 0x1d, 0x3b, 0x51, 0x4c, 0xc2, 0x77, 0x92, 0x5a, 0xfc, 0x19, 0x6c, 0xce, 0x01,
	0x45, 0x2f, 0x66, 0x29, 0x4b, 0xd0, 0x24, 0x89, 0x43, 0xa8, 0x2d, 0x38, 0xbc, 0x52, 0x96, 0xae,
	0x38, 0xde, 0x8d, 0xef, 0x8c, 0xe4, 0x59, 0x90, 0x24, 0xda, 0x81, 0x52, 0x60, 0xcd, 0x08, 0x61,
	0xa5, 0x54, 0x36, 0x39, 0x91, 0xaa, 0xb0, 0xf5, 0x4c, 0x85, 0xfd, 0x00, 0xaa, 0x6d, 0xbe, 0x91,
	0x5b, 0xb7, 0x03, 0xa5, 0x74, 0x70, 0x38, 0x81, 0x9f, 0xc2, 0xd6, 0x79, 0xe0, 0xfa, 0x96, 0xfd,
	0xc2, 0x71, 0x49, 0xca, 0xb8, 0x91, 0xef, 0xc5, 0xc4, 0xe3, 0x69, 0xa8, 0x9a, 0x92, 0xc4, 0x1f,
	0xc3, 0x7b, 0x69, 0x71, 0x8a, 0xab, 0x42, 0x71, 0x1a, 0xba, 0xb2, 0x2f, 0x4d, 0x43, 0x17, 0x6f,
	0x42, 0xa5, 0xe7, 0x78, 0x63, 0x99, 0xb3, 0x4f, 0xa0, 0xcc, 0x49, 0x11, 0xa3, 0x1b, 0x12, 0x46,
	0x8e, 0xef, 0x49, 0xbf, 0x05, 0x89, 0xff, 0xa6, 0x40, 0xb5, 0x1b, 0xda, 0x99, 0xec, 0xbc, 0x98,
	0xba, 0x6e, 0xc7, 0x9a, 0x10, 0x99, 0x1d, 0x49, 0x53, 0x18, 0xd1, 0xd3, 0x64, 0x90, 0x04, 0x49,
	0x4f, 0xb4, 0xee, 0xc4, 0x33, 0x11, 0x23, 0xf6, 0x4d, 0x5d, 0xa7, 0xad, 0x8f, 0x88, 0x2e, 0xcb,
	0x09, 0x6a, 0xf8, 0xd7, 0x4e, 0x20, 0x6e, 0x2c, 0xfa, 0x49, 0x51, 0x75, 0x1a, 0xbb, 0x70, 0x56,
	0x7f, 0xc0, 0x51, 0x05, 0xc9, 0x82, 0x37, 0xb1, 0x1c, 0xb7, 0xfe, 0x50, 0x04, 0x8f, 0x12, 0xb8,
	0x0a, 0x20, 0x2c, 0xa6, 0x83, 0xc2, 0x3f, 0x14, 0xd8, 0xfd, 0xa5, 0xef, 0x78, 0xfa, 0xa0, 0xd7,
	0x27, 0x11, 0xf5, 0x49, 0x7a, 0xd2, 0x82, 0x72, 0x60, 0x85, 0xf1, 0x6c, 0x30, 0x0b, 0xe4, 0xe9,
	0x7e, 0x2c, 0x4e, 0x77, 0xee, 0x86, 0x46, 0x4f, 0x4a, 0x9b, 0xf3, 0x8d, 0xf4, 0xbe, 0x60, 0x04,
	0x0b, 0x08, 0xf7, 0x7a, 0xce, 0xc8, 0xbf, 0x2e, 0x8b, 0xab, 0xe6, 0x8e, 0x43, 0x28, 0x47, 0x5c,
	0x65, 0xbb, 0x25, 0xef, 0x9e, 0x84, 0x81, 0x3f, 0x82, 0x72, 0x62, 0x01, 0x2a, 0x43, 0xa9, 0xd7,
	0xbc, 0x30, 0x4c, 0x75, 0x4d, 0x7e, 0x1a, 0xaa, 0x82, 0x3b, 0xb0, 0xb7, 0x68, 0x7a, 0x14, 0xf8,
	0x5e, 0x44, 0xb2, 0xd0, 0xca, 0x02, 0x34, 0xad, 0x56, 0x72, 0x1b, 0x38, 0xe1, 0x4c, 0xde, 0x20,
	0x9c, 0xc2, 0x9f, 0x83, 0x36, 0x20, 0xe1, 0xc4, 0xf1, 0xe8, 0x10, 0xb6, 0x14, 0xc0, 0x3b, 0x31,
	0xf1, 0x07, 0x70, 0x90, 0xbb, 0x97, 0x1b, 0x84, 0xff, 0x5c, 0x80, 0xc7, 0xf2, 0xa0, 0x0e, 0x42,
	0xcb, 0x8b, 0xac, 0x11, 0x0d, 0x84, 0xce, 0x2f, 0x62, 0x16, 0x14, 0xa9, 0x87, 0x5d, 0x07, 0x89,
	0x0a, 0xf6, 0x7d, 0xcf, 0x81, 0xee, 0xf7, 0xa0, 0x66, 0x98, 0x34, 0xe3, 0x45, 0x96, 0xf1, 0x9f,
	0x8b, 0x8c, 0xbf, 0x9d, 0x29, 0x8d, 0xce, 0x02, 0x8a, 0xb9, 0x84, 0x8b, 0x9b, 0xa0, 0x2e, 0x4a,
	0xa1, 0x7d, 0xd8, 0x35, 0x8d, 0x66, 0xeb, 0x62, 0x68, 0x1a, 0xba, 0xd1, 0xfe, 0x95, 0x31, 0xec,
	0x35, 0x2f, 0xce, 0x8c, 0xce, 0x40, 0x5d, 0x43, 0x08, 0x6a, 0xfa, 0x97, 0xcd, 0x4e, 0xc7, 0x38,
	0x1d, 0x76, 0x7b, 0x46, 0xc7, 0x68, 0xa9, 0x0a, 0xfe, 0x0c, 0x3e, 0x7d, 0xa3, 0x3d, 0x22, 0x8c,
	0xaf, 0xe0, 0x40, 0x8a, 0xf6, 0x48, 0xe8, 0xf8, 0xb6, 0x33, 0xea, 0xcf, 0xbc, 0x91, 0x0c, 0x5d,
	0x6e, 0x98, 0x94, 0x55, 0xe3, 0xda, 0x23, 0x38, 0xcc, 0x07, 0xe3, 0xca, 0x8e, 0xbf, 0x53, 0x60,
	0x43, 0x74, 0xaf, 0x10, 0x3d, 0x87, 0x9a, 0x14, 0x6e, 0xb1, 0xf6, 0x8c, 0xf6, 0x16, 0x62, 0x29,
	0x8c, 0xd0, 0x76, 0x96, 0xf8, 0xf4, 0x60, 0xae, 0xa1, 0x2f, 0xa0, 0xd2, 0x27, 0x74, 0x6c, 0xe6,
	0x8d, 0x74, 0x57, 0x88, 0x65, 0x7b, 0xb2, 0xb6, 0x2d, 0xd8, 0xe9, 0xb6, 0x89, 0xd7, 0x8e, 0x9f,
	0x43, 0x45, 0xb7, 0x42, 0x9b, 0x9d, 0x74, 0x12, 0xa2, 0x1f, 0x41, 0x89, 0x7d, 0x22, 0x29, 0x9e,
	0x6e, 0x5a, 0xda, 0x56, 0x96, 0xc9, 0x11, 0xbe, 0x53, 0xa0, 0xd8, 0xf3, 0xa3, 0x77, 0xe0, 0xc8,
	0x73, 0x00, 0xde, 0x7f, 0x4f, 0xfd, 0xb1, 0x8f, 0xea, 0x42, 0x6a, 0xa9, 0x83, 0x6b, 0x7b, 0x39,
	0x2b, 0xdc, 0x96, 0x67, 0x50, 0x69, 0x7b, 0xaf, 0x7d, 0x91, 0x5d, 0xd4, 0x80, 0x75, 0xda, 0x9c,
	0x11, 0x92, 0x21, 0x99, 0x37, 0x6e, 0x4d, 0xcd, 0xf0, 0xf8, 0xf6, 0xbf, 0x96, 0xf8, 0x74, 0x74,
	0x66, 0x79, 0xd6, 0x98, 0x84, 0x48, 0x87, 0x4a, 0xea, 0x0d, 0x86, 0xf6, 0xa5, 0xfb, 0x4b, 0x6f,
	0x3e, 0xed, 0xfd, 0xbc, 0x25, 0xee, 0xd5, 0x6f, 0x60, 0x3b, 0xe7, 0xf9, 0x85, 0x3e, 0x4a, 0x9c,
	0x58, 0xf5, 0xa0, 0xd3, 0x3e, 0xbc, 0x4b, 0x84, 0x83, 0xeb, 0x50, 0x49, 0xbd, 0x9a, 0x12, 0x0b,
	0x97, 0x9f, 0x74, 0x89, 0x85, 0x8b, 0x8f, 0x2c, 0xbc, 0x86, 0xda, 0xec, 0x09, 0x30, 0x1f, 0xab,
	0xd1, 0x41, 0xfe, 0xb0, 0xcd, 0x81, 0xf6, 0x57, 0x4e, 0xe2, 0x3c, 0x85, 0xf3, 0x59, 0x39, 0x49,
	0xe1, 0xd2, 0x14, 0xae, 0xed, 0xe5, 0xac, 0x70, 0x84, 0x5f, 0x03, 0x5a, 0x9e, 0x67, 0xd1, 0x51,
	0x22, 0xbf, 0x62, 0x52, 0xd6, 0x1e, 0xdd, 0x21, 0xc1, 0x91, 0x4f, 0xa1, 0x96, 0x1d, 0xaf, 0xd0,
	0xa1, 0xd8, 0x93, 0x3b, 0xb6, 0x69, 0xda, 0x8a, 0x55, 0x8e, 0xf6, 0x47, 0x05, 0x3e, 0x7c, 0x43,
	0x77, 0x41, 0x4f, 0xef, 0xd5, 0x15, 0xb5, 0xc6, 0xdb, 0x8a, 0x8b, 0xa6, 0xb5, 0x76, 0xfc, 0xbd,
	0x02, 0x45, 0x7d, 0xd0, 0x43, 0x5d, 0xa8, 0x65, 0x2f, 0xac, 0xc4, 0xb5, 0xdc, 0x2b, 0x58, 0xfb,
	0x60, 0xc5, 0xaa, 0x04, 0x46, 0xbf, 0x83, 0xed, 0x9c, 0x5b, 0x27, 0x29, 0xda, 0xd5, 0xb7, 0x99,
	0x86, 0xef, 0x12, 0x49, 0x0c, 0xff, 0x06, 0xaa, 0xb4, 0x25, 0xf2, 0x0e, 0x4f, 0x42, 0x64, 0xc1,
	0x4e, 0x5e, 0xcb, 0x44, 0x78, 0x21, 0x24, 0x39, 0xcd, 0x59, 0xfb, 0xf8, 0x4e, 0x19, 0xa9, 0xf2,
	0xe4, 0x13, 0xd8, 0x75, 0xfc, 0xc6, 0x38, 0x0c, 0x46, 0x42, 0x3e, 0x22, 0x21, 0x6d, 0x53, 0x27,
	0x70, 0x42, 0xc9, 0x5e, 0xe8, 0xc7, 0x7e, 0x4f, 0xb9, 0x7c, 0xc0, 0xfe, 0xe1, 0xf9, 0xf1, 0xff,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x12, 0x27, 0xd1, 0x1a, 0xf0, 0x11, 0x00, 0x00,
}
